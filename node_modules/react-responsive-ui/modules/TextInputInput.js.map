{"version":3,"sources":["../source/TextInputInput.js"],"names":["TextInput","ref","id","value","multiline","inputComponent","focus","onChange","onKeyDown","disabled","label","placeholder","type","autoresize","indicateInvalid","error","originalInputStyle","inputStyle","className","containerRef","floatingLabel","required","children","rest","input","hiddenTextArea","autoResize","Autoresize","current","initialized","resize","init","onWindowResize","event","window","addEventListener","removeEventListener","_onChange","newValue","target","_onKeyDown","defaultPrevented","storeInputNode","node","properties","autoFocus","isEmptyValue","undefined","style","rows","HIDDEN_TEXTAREA_STYLE","createElement","forwardRef","propTypes","string","bool","isRequired","elementType","oneOfType","defaultProps","overflow","visibility","position","whiteSpace","getInput","getHiddenTextArea","currentHeight","verticalPadding","bordersHeight","initAttempts","getMeasurements","haveStylesLoaded","setTimeout","height","scrollHeight","Math","abs","getComputedStyle","ceil","parseFloat","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth"],"mappings":"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","file":"TextInputInput.js","sourcesContent":["import React, { useRef, useMemo, useCallback, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport throttle from 'lodash/throttle'\r\nimport createRef from 'react-create-ref'\r\n\r\nimport { getModularGridUnit } from './utility/grid'\r\nimport { submitFormOnCtrlEnter } from './utility/dom'\r\n\r\nfunction TextInput({\r\n\tid,\r\n\tvalue,\r\n\tmultiline,\r\n\tinputComponent,\r\n\t// `focus` property is deprecated. Use `autoFocus` instead.\r\n\tfocus,\r\n\tonChange,\r\n\tonKeyDown,\r\n\tdisabled,\r\n\tlabel,\r\n\tplaceholder,\r\n\ttype,\r\n\tautoresize,\r\n\tindicateInvalid,\r\n\terror,\r\n\tinputStyle: originalInputStyle,\r\n\tclassName,\r\n\r\n\t// Rest\r\n\tcontainerRef,\r\n\tfloatingLabel,\r\n\trequired,\r\n\tchildren,\r\n\t...rest\r\n}, ref) {\r\n\tconst input = useRef()\r\n\tconst hiddenTextArea = useRef()\r\n\t// hiddenTextAreaSingleLine = createRef()\r\n\r\n\tconst autoResize = useMemo(() => {\r\n\t\tif (multiline && autoresize) {\r\n\t\t\treturn new Autoresize(\r\n\t\t\t\t() => input.current,\r\n\t\t\t\t() => hiddenTextArea.current\r\n\t\t\t)\r\n\t\t}\r\n\t}, [])\r\n\r\n\t// On component update.\r\n\tuseEffect(() => {\r\n\t\tif (multiline && autoresize) {\r\n\t\t\tif (autoResize.initialized) {\r\n\t\t\t\tautoResize.resize()\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n\r\n\t// Client side rendering, javascript is enabled\r\n\tuseEffect(() =>  {\r\n\t\tif (multiline && autoresize) {\r\n\t\t\t// Doing `this.init()` here\r\n\t\t\t// because `<textarea/>` should autoresize\r\n\t\t\t// in case its `value` is set up front.\r\n\t\t\tautoResize.init()\r\n\t\t\tconst onWindowResize = throttle((event) => autoResize.resize(), 100)\r\n\t\t\twindow.addEventListener('resize', onWindowResize)\r\n\t\t\treturn () => {\r\n\t\t\t\twindow.removeEventListener('resize', onWindowResize)\r\n\t\t\t}\r\n\t\t}\r\n\t}, [])\r\n\r\n\t// The underlying `input` component\r\n\t// can pass both `event`s and `value`s\r\n\t// to this parent `onChange` listener.\r\n\tconst _onChange = useCallback((event) => {\r\n\t\t// Extract `value` from the argument\r\n\t\t// of this `onChange` listener\r\n\t\t// (for convenience)\r\n\t\tlet newValue = event\r\n\t\tif (event && event.target) {\r\n\t\t\tnewValue = event.target.value\r\n\t\t}\r\n\t\t// Call the parent `onChange` handler\r\n\t\t// with the `value` as an argument (for convenience).\r\n\t\t// Call `onChange` only if `value` did actually change\r\n\t\tif (newValue !== value) {\r\n\t\t\tonChange(newValue)\r\n\t\t}\r\n\t}, [value, onChange])\r\n\r\n\tconst _onKeyDown = useCallback((event) => {\r\n\t\tif (onKeyDown) {\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\t\tif (event.defaultPrevented) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif (submitFormOnCtrlEnter(event, input.current)) {\r\n\t\t\treturn\r\n\t\t}\r\n\t}, [onKeyDown, input])\r\n\r\n\tconst storeInputNode = useCallback((node) => {\r\n\t\tif (ref) {\r\n\t\t\tif (typeof ref === 'function') {\r\n\t\t\t\tref(node)\r\n\t\t\t} else {\r\n\t\t\t\tref.current = node\r\n\t\t\t}\r\n\t\t}\r\n\t\tinput.current = node\r\n\t}, [input, ref]);\r\n\r\n\tconst inputStyle = useMemo(() => {\r\n\t\tif (multiline && autoresize) {\r\n\t\t\treturn {\r\n\t\t\t\tresize: 'none',\r\n\t\t\t\t...originalInputStyle\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn originalInputStyle\r\n\t}, [multiline, autoresize, originalInputStyle])\r\n\r\n\tconst properties = {\r\n\t\t// Placed `autoFocus` before `...rest` so that\r\n\t\t// it doesn't override an already passed `autoFocus`.\r\n\t\t// `focus` property is deprecated. Use `autoFocus` instead.\r\n\t\tautoFocus: focus,\r\n\t\t...rest,\r\n\t\tid,\r\n\t\tref: storeInputNode,\r\n\t\tvalue: isEmptyValue(value) ? '' : value,\r\n\t\tdisabled,\r\n\t\t'aria-label'    : rest['aria-label'] || (id && label ? undefined : label),\r\n\t\t'aria-required' : rest['aria-required'] || (required ? true : undefined),\r\n\t\t'aria-invalid'  : rest['aria-invalid'] || (error && indicateInvalid ? true : undefined),\r\n\t\tplaceholder,\r\n\t\tonChange: _onChange,\r\n\t\tonKeyDown: _onKeyDown,\r\n\t\tstyle: inputStyle,\r\n\t\tclassName: classNames(\r\n\t\t\tclassName,\r\n\t\t\t// `<TextInput/>` has `border-color` to indicate its `:focus` state.\r\n\t\t\t// Therefore the `outline` can be safely removed.\r\n\t\t\t'rrui__outline',\r\n\t\t\t'rrui__input-element',\r\n\t\t\t'rrui__input-field', {\r\n\t\t\t\t// CSS selector performance optimization\r\n\t\t\t\t'rrui__input-field--invalid'   : indicateInvalid && error,\r\n\t\t\t\t'rrui__input-field--disabled'  : disabled,\r\n\t\t\t\t'rrui__input-field--multiline' : multiline\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\t// In case of `multiline` set to `true`\r\n\t// this is gonna be a `<textarea/>`\r\n\tif (multiline) {\r\n\t\tif (autoresize) {\r\n\t\t\treturn [\r\n\t\t\t\t// <textarea\r\n\t\t\t\t// \tkey=\"textarea-measurement-single-line\"\r\n\t\t\t\t// \tref={this.hiddenTextAreaSingleLine}\r\n\t\t\t\t// \trows=\"1\"\r\n\t\t\t\t// \treadOnly\r\n\t\t\t\t// \taria-hidden=\"true\"\r\n\t\t\t\t// \tvalue=\"\"\r\n\t\t\t\t// \ttabIndex={-1}\r\n\t\t\t\t// \tclassName={properties.className}\r\n\t\t\t\t// \tstyle={inputStyle ? { ...inputStyle, ...HIDDEN_TEXTAREA_STYLE } : HIDDEN_TEXTAREA_STYLE}/>,\r\n\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tkey=\"textarea-measurement\"\r\n\t\t\t\t\tref={hiddenTextArea}\r\n\t\t\t\t\treadOnly\r\n\t\t\t\t\taria-hidden\r\n\t\t\t\t\tvalue={properties.value}\r\n\t\t\t\t\trows={properties.rows}\r\n\t\t\t\t\ttabIndex={-1}\r\n\t\t\t\t\tclassName={properties.className}\r\n\t\t\t\t\tstyle={inputStyle ? { ...inputStyle, ...HIDDEN_TEXTAREA_STYLE } : HIDDEN_TEXTAREA_STYLE}/>,\r\n\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tkey=\"textarea\"\r\n\t\t\t\t\t{ ...properties }/>\r\n\t\t\t]\r\n\t\t}\r\n\r\n\t\treturn <textarea key=\"textarea\" { ...properties }/>\r\n\t}\r\n\r\n\t// Add `<input/>` `type` property.\r\n\tif (inputComponent === 'input') {\r\n\t\tproperties.type = type || 'text'\r\n\t}\r\n\r\n\treturn React.createElement(inputComponent, properties)\r\n}\r\n\r\nTextInput = React.forwardRef(TextInput)\r\n\r\nTextInput.propTypes =\r\n{\r\n\t// (optional) HTML `id` attribute.\r\n\tid : PropTypes.string,\r\n\r\n\t// `<input type/>` attribute.\r\n\ttype : PropTypes.string,\r\n\r\n\t// Whether `<textarea/>` should autoresize itself\r\n\t// (is `true` by default)\r\n\tautoresize : PropTypes.bool.isRequired,\r\n\r\n\t// In order for this to work properly\r\n\t// `<textarea/>` vertical padding should be `0`\r\n\t// and instead the padding should be defined on `<textarea/>` parent `<div/>`\r\n\t// like it's done in Material UI.\r\n\t// Otherwise it won't look pretty and the line of text near the top border\r\n\t// will be partially visible resulting in weird UX.\r\n\t// If `<textarea/>` vertical padding was `0`\r\n\t// the line of text near the top border wouldn't be visible.\r\n\t// // The maximum number of rows <textarea/> grows up to.\r\n\t// rowsMax          : PropTypes.number.isRequired,\r\n\r\n\t// Set to `false` to prevent the `<label/>` from floating\r\n\tfloatingLabel    : PropTypes.bool.isRequired,\r\n\r\n\t// A custom input component.\r\n\t// (is `<input/>` by default)\r\n\tinputComponent   : PropTypes.elementType.isRequired,\r\n\r\n\t// Indicates that the input is invalid.\r\n\terror: PropTypes.oneOfType([\r\n\t\tPropTypes.string,\r\n\t\tPropTypes.bool\r\n\t]),\r\n}\r\n\r\nTextInput.defaultProps =\r\n{\r\n\t// `<textarea/>` should autoresize itself\r\n\tautoresize : true,\r\n\r\n\t// Set to `false` to prevent the `<label/>` from floating\r\n\tfloatingLabel : true,\r\n\r\n\t// A custom input component.\r\n\t// (is `<input/>` by default)\r\n\tinputComponent : 'input',\r\n\r\n\t// // The maximum number of rows <textarea/> grows up to.\r\n\t// rowsMax : 12\r\n}\r\n\r\nexport default TextInput\r\n\r\n// https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/InputBase/Textarea.js\r\nconst HIDDEN_TEXTAREA_STYLE = {\r\n\t// Overflow also needed to here to remove the extra row\r\n\t// added to `<textarea/>`s in Firefox.\r\n\toverflow: 'hidden',\r\n\t// Visibility needed to hide the extra `<textarea/>` on iPads.\r\n\tvisibility: 'hidden',\r\n\tposition: 'absolute',\r\n\t// Don't know why is it here.\r\n\twhiteSpace: 'pre-wrap'\r\n}\r\n\r\nfunction isEmptyValue(value) {\r\n\treturn value === '' || value === undefined || value === null\r\n}\r\n\r\nclass Autoresize {\r\n\tcurrentHeight = 0\r\n\tverticalPadding = 0\r\n\tbordersHeight = 0\r\n\r\n\tinitAttempts = 0\r\n\r\n\tconstructor(getInput, getHiddenTextArea) {\r\n\t\tthis.getInput = getInput\r\n\t\tthis.getHiddenTextArea = getHiddenTextArea\r\n\t}\r\n\r\n\t// Copy-pasted from Material UI on Oct 24th, 2018.\r\n\t// https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/InputBase/Textarea.js\r\n\tresize() {\r\n\t\tconst hiddenTextArea = this.getHiddenTextArea()\r\n\t\t// Guarding for **broken** shallow rendering method that call componentDidMount\r\n\t\t// but doesn't handle refs correctly.\r\n\t\t// To remove once the shallow rendering has been fixed.\r\n\t\tif (!hiddenTextArea) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// const lineHeight = this.hiddenTextAreaSingleLine.current.scrollHeight - verticalPadding.current\r\n\t\tlet height = hiddenTextArea.scrollHeight\r\n\t\t// Guarding for jsdom, where scrollHeight isn't present.\r\n\t\t// See https://github.com/tmpvar/jsdom/issues/1013\r\n\t\tif (height === undefined) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// It would have to first subtract `paddingTop` and `paddingBottom`,\r\n\t\t// then it would calculate `rowsMax * lineHeight` and\r\n\t\t// then it would re-add `paddingTop` and `paddingBottom`.\r\n\t\t// height = Math.min(rowsMax * lineHeight + verticalPadding.current, height)\r\n\t\t//\r\n\t\t// `.scrollHeight` doesn't include borders.\r\n\t\t// `.style.height` does include borders.\r\n\t\theight += this.bordersHeight\r\n\t\t//\r\n\t\t// if (height <= this.minHeight) {\r\n\t\t// \theight = this.minHeight\r\n\t\t// }\r\n\t\t// For some weird reason Chrome on Windows 10\r\n\t\t// requires an extra pixel been added\r\n\t\t// to avoid showing vertical scrollbar.\r\n\t\t// (Oct 24th, 2018)\r\n\t\t// else {\r\n\t\t\theight += 1\r\n\t\t// }\r\n\t\t//\r\n\t\t// \"Need a large enough different to update the height.\r\n\t\t//  This prevents infinite rendering loop.\"\r\n\t\t// It's unclear what loop they're talking about.\r\n\t\tif (Math.abs(this.currentHeight - height) > 1) {\r\n\t\t\tthis.currentHeight = height\r\n\t\t\t// `.style.height` includes borders.\r\n\t\t\tthis.getInput().style.height = height + 'px'\r\n\t\t}\r\n\t}\r\n\r\n\t// `height` works incorrectly in some weird cases.\r\n\t// For example, when `<textarea/>` is hidden when mounted\r\n\t// or when there's no stylesheet loaded yet.\r\n\t// For example, when stylesheets are included \"dynamically\"\r\n\t// like Webpack's `style-loader` does (is used in development mode,\r\n\t// or when using \"code splitting\" when \"chunks\" are `import()`ed dynamically).\r\n\t//\r\n\t// https://stackoverflow.com/questions/39400038/how-to-ensure-that-hot-css-loads-before-js-in-webpack-dev-server\r\n\t// https://github.com/webpack-contrib/style-loader/issues/269\r\n\t//\r\n\t// An alternative solution would be:\r\n\t//\r\n\t// input.current.minHeight = 0\r\n\t// input.current.minHeight = input.current.scrollHeight + bordersHeight.current\r\n\t//\r\n\t// or:\r\n\t//\r\n\t// input.current.minHeight = hiddenTextArea.current.scrollHeight + bordersHeight.current\r\n\t//\r\n\t// which wouldn't ever undersize the <textarea/>\r\n\t// but it would oversize it due to the incorrect\r\n\t// <textarea/> width before styles are loaded.\r\n\t//\r\n\tinit = () => {\r\n\t\t// Exit if the component is no longer mounted.\r\n\t\tif (!this.getInput()) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.initAttempts++\r\n\t\tthis.getMeasurements()\r\n\t\tif (this.haveStylesLoaded()) {\r\n\t\t\tthis.resize()\r\n\t\t}\r\n\t\tthis.initialized = true\r\n\t\t// Even if padding on <textarea/> has been set\r\n\t\t// it's still possible that `font-size` hasn't been set yet.\r\n\t\t// Or it could be another padding in a subsequent stylesheet.\r\n\t\t// So keep re-initializing <textarea/>, say, for a second.\r\n\t\tif (this.initAttempts <= 5) {\r\n\t\t\tsetTimeout(this.init, 200)\r\n\t\t}\r\n\t}\r\n\r\n\tgetMeasurements() {\r\n\t\tconst style = getComputedStyle(this.getInput())\r\n\r\n\t\t// // Measurements can be in `em`s/`rem`s/`pt`s which can give fractional pixel sizes.\r\n\t\t// // `style.height` includes borders.\r\n\t\t// currentHeight.current = Math.ceil(parseFloat(style.height))\r\n\t\t// this.minHeight = currentHeight.current\r\n\r\n\t\t// Get vertical padding.\r\n\t\t// Measurements can be in `em`s/`rem`s/`pt`s which can give fractional pixel sizes.\r\n\t\tthis.verticalPadding = Math.ceil(parseFloat(style.paddingTop)) + Math.ceil(parseFloat(style.paddingBottom))\r\n\r\n\t\t// Top and bottom borders are extra height,\r\n\t\t// because `.scrollHeight` doesn't include borders.\r\n\t\t// Measurements can be in `em`s/`rem`s/`pt`s which can give fractional pixel sizes.\r\n\t\tthis.bordersHeight =\r\n\t\t\tMath.ceil(parseFloat(style.borderTopWidth)) +\r\n\t\t\tMath.ceil(parseFloat(style.borderBottomWidth))\r\n\t}\r\n\r\n\t// Even if padding on <textarea/> has been set\r\n\t// it's still possible that `font-size` hasn't been set yet.\r\n\t// (it happened in a project)\r\n\t// So this function doesn't guarantee anything.\r\n\thaveStylesLoaded() {\r\n\t\t// The default <textarea/> top/bottom padding in Chrome on Windows is 2px.\r\n\t\t// `react-responsive-ui` multiline text inputs are supposed to have larger padding.\r\n\t\treturn this.verticalPadding > 2 * 2\r\n\t}\r\n}"]}