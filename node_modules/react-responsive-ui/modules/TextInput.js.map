{"version":3,"sources":["../source/TextInput.js"],"names":["TextInput","ref","value","onFocus","onBlur","indicateInvalid","error","style","className","password","email","rest","isFocused","setFocused","_onFocus","event","_onBlur","type","forwardRef","propTypes","label","string","name","oneOfType","number","onChange","func","isRequired","inputComponent","disabled","bool","required","placeholder","multiline","focus","tabIndex","rows","cols","onKeyDown","onClick","object","inputStyle","defaultProps"],"mappings":"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","file":"TextInput.js","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport Input from './TextInputComponent'\r\nimport WithError from './WithError'\r\n\r\nimport { onBlurForReduxForm } from './utility/redux-form'\r\n\r\nfunction TextInput({\r\n\tvalue,\r\n\tonFocus,\r\n\tonBlur,\r\n\tindicateInvalid,\r\n\terror,\r\n\tstyle,\r\n\tclassName,\r\n\t// Deprecated.\r\n\t// Use `type=\"password\"` instead.\r\n\tpassword,\r\n\t// Deprecated.\r\n\t// Use `type=\"email\"` instead.\r\n\temail,\r\n\t...rest\r\n}, ref) {\r\n\tconst [isFocused, setFocused] = useState()\r\n\r\n\tconst _onFocus = useCallback((event) => {\r\n\t\tif (onFocus) {\r\n\t\t\tonFocus(event)\r\n\t\t}\r\n\t\tsetFocused(true)\r\n\t}, [onFocus, setFocused])\r\n\r\n\tconst _onBlur = useCallback((event) => {\r\n\t\tif (onBlur) {\r\n\t\t\tonBlurForReduxForm(onBlur, event, value)\r\n\t\t}\r\n\t\tsetFocused(false)\r\n   }, [onBlur, setFocused, value])\r\n\r\n\t// Deprecated.\r\n\t// Use `type=\"password\"` instead.\r\n\tif (password) {\r\n\t\trest.type = 'password'\r\n\t}\r\n\r\n\t// Deprecated.\r\n\t// Use `type=\"email\"` instead.\r\n\tif (email) {\r\n\t\trest.type = 'email'\r\n\t}\r\n\r\n\treturn (\r\n\t\t<WithError\r\n\t\t\terror={error}\r\n\t\t\tindicateInvalid={indicateInvalid}\r\n\t\t\tstyle={style}\r\n\t\t\tclassName={classNames(className, 'rrui__text-input', {\r\n\t\t\t\t'rrui__text-input--focus': isFocused\r\n\t\t\t})}>\r\n\r\n\t\t\t<Input\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tvalue={value}\r\n\t\t\t\terror={error}\r\n\t\t\t\tindicateInvalid={indicateInvalid}\r\n\t\t\t\tonFocus={_onFocus}\r\n\t\t\t\tonBlur={_onBlur} />\r\n\t\t</WithError>\r\n\t)\r\n}\r\n\r\nTextInput = React.forwardRef(TextInput)\r\n\r\nTextInput.propTypes =\r\n{\r\n\t// Text field label\r\n\tlabel            : PropTypes.string,\r\n\r\n\t// HTML form input `name` attribute\r\n\tname             : PropTypes.string,\r\n\r\n\t// Text field value\r\n\tvalue            : PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n\r\n\t// Is called when the `value` is edited\r\n\tonChange         : PropTypes.func.isRequired,\r\n\r\n\t// A custom input component.\r\n\tinputComponent   : PropTypes.oneOfType\r\n\t([\r\n\t\tPropTypes.func,\r\n\t\tPropTypes.string\r\n\t]),\r\n\r\n\t// Disables the text field\r\n\tdisabled         : PropTypes.bool,\r\n\r\n\t// Indicates that the input is invalid.\r\n\terror: PropTypes.oneOfType([\r\n\t\tPropTypes.string,\r\n\t\tPropTypes.bool\r\n\t]),\r\n\r\n\t// If this flag is `true` then the `error` is shown.\r\n\t// If this flag is `false` then the `error` is not shown (even if passed).\r\n\tindicateInvalid  : PropTypes.bool,\r\n\r\n\t// Set to `true` to mark the field as required\r\n\trequired         : PropTypes.bool,\r\n\r\n\t// `<input/>` placeholder\r\n\tplaceholder      : PropTypes.string,\r\n\r\n\t// `<textarea/>` instead of an `<input type=\"text\"/>`\r\n\tmultiline        : PropTypes.bool,\r\n\r\n\t// Deprecated.\r\n\t// Use `type=\"email\"` instead.\r\n\t// Sets HTML input `type` attribute to `email`\r\n\temail            : PropTypes.bool,\r\n\r\n\t// Deprecated.\r\n\t// Use `type=\"password\"` instead.\r\n\t// Sets HTML input `type` attribute to `password`\r\n\tpassword         : PropTypes.bool,\r\n\r\n\t// Autofocuses the input field.\r\n\t// Deprecated. Use `autoFocus` instead.\r\n\tfocus            : PropTypes.bool,\r\n\r\n\t// HTML `tabindex` attribute\r\n\ttabIndex         : PropTypes.number,\r\n\r\n\t// `<textarea/>` `rows` attribute (row count, i.e. height)\r\n\trows             : PropTypes.number,\r\n\r\n\t// `<textarea/>` `cols` attribute (column count, i.e. width)\r\n\tcols             : PropTypes.number,\r\n\r\n\t// Is called when the input is focused\r\n\tonFocus          : PropTypes.func,\r\n\r\n\t// `onKeyDown` event handler\r\n\tonKeyDown        : PropTypes.func,\r\n\r\n\t// Is called when the input is blurred\r\n\tonBlur           : PropTypes.func,\r\n\r\n\t// Is called when the input is clicked\r\n\tonClick           : PropTypes.func,\r\n\r\n\t// CSS style object\r\n\tstyle            : PropTypes.object,\r\n\r\n\t// CSS name\r\n\tclassName        : PropTypes.string,\r\n\r\n\t// CSS style object for `<input/>`\r\n\tinputStyle       : PropTypes.object\r\n}\r\n\r\nTextInput.defaultProps =\r\n{\r\n\t// Show `error` (if passed).\r\n\tindicateInvalid : true\r\n}\r\n\r\nexport default TextInput"]}