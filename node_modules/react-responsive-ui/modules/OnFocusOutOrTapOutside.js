'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactCreateRef = require('react-create-ref');

var _reactCreateRef2 = _interopRequireDefault(_reactCreateRef);

var _OnFocusOut = require('./OnFocusOut');

var _OnFocusOut2 = _interopRequireDefault(_OnFocusOut);

var _OnTapOutside = require('./OnTapOutside');

var _OnTapOutside2 = _interopRequireDefault(_OnTapOutside);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * `<OnFocusOutOrTapOutside/>` sets `onBlur` on the child element.
 * Calls `onFocusOut` on focus out or tap outside.
 */
var OnFocusOutOrTapOutside = function (_React$Component) {
	_inherits(OnFocusOutOrTapOutside, _React$Component);

	function OnFocusOutOrTapOutside() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, OnFocusOutOrTapOutside);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = OnFocusOutOrTapOutside.__proto__ || Object.getPrototypeOf(OnFocusOutOrTapOutside)).call.apply(_ref, [this].concat(args))), _this), _this.onFocusOutRef = (0, _reactCreateRef2.default)(), _this.onTapOutsideRef = (0, _reactCreateRef2.default)(), _this.stopListeningToTouches = function () {
			return _this.onTapOutsideRef.current.stopListeningToTouches();
		}, _this.listenToTouches = function () {
			return _this.onTapOutsideRef.current.listenToTouches();
		}, _this.onBlur = function (event) {
			return _this.onFocusOutRef.current.onBlur(event);
		}, _this.onFocusOut = function (event) {
			// `onFocusOut` is triggered right after `onTapOutside`.
			// This workaround prevents duplicate `onFocusOut` call.
			if (_this.onTapOutsideTimer) {
				clearTimeout(_this.onTapOutsideTimer);
				_this.onTapOutsideTimer = undefined;
			}
			_this.onBlur(event);
		}, _this.onBlur = function (event) {
			var onFocusOut = _this.props.onFocusOut;

			onFocusOut(event);
		}, _this.onTapOutside = function (event) {
			var onTapOutsideDelay = _this.props.onTapOutsideDelay;

			clearTimeout(_this.onTapOutsideTimer);
			_this.onTapOutsideTimer = setTimeout(function () {
				// `onFocusOut` is triggered right after `onTapOutside`.
				// This workaround prevents duplicate `onFocusOut` call.
				if (_this.onTapOutsideTimer) {
					_this.onTapOutsideTimer = undefined;
					_this.onBlur(event);
				}
			}, onTapOutsideDelay);
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(OnFocusOutOrTapOutside, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var listenToTouches = this.props.listenToTouches;

			if (listenToTouches) {
				this.listenToTouches();
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			clearTimeout(this.onTapOutsideTimer);
		}

		// These're called from outside in `<Expandable/>`.

	}, {
		key: 'render',
		value: function render() {
			var _props = this.props,
			    getTogglerNode = _props.getTogglerNode,
			    getContainerNode = _props.getContainerNode;
			var children = this.props.children;


			children = _react2.default.cloneElement(children, {
				onBlur: this.onFocusOutRef.current && this.onFocusOutRef.current.onBlur
			});

			children = _react2.default.createElement(
				_OnFocusOut2.default,
				{
					ref: this.onFocusOutRef,
					getContainerNode: getContainerNode,
					getTogglerNode: getTogglerNode,
					onFocusOut: this.onFocusOut },
				children
			);

			return _react2.default.createElement(
				_OnTapOutside2.default,
				{
					ref: this.onTapOutsideRef,
					getContainerNode: getContainerNode,
					getTogglerNode: getTogglerNode,
					onTapOutside: this.onTapOutside },
				children
			);
		}
	}]);

	return OnFocusOutOrTapOutside;
}(_react2.default.Component);

exports.default = OnFocusOutOrTapOutside;


OnFocusOutOrTapOutside.propTypes = {
	getContainerNode: _propTypes2.default.func.isRequired,
	getTogglerNode: _propTypes2.default.func,
	onFocusOut: _propTypes2.default.func.isRequired,
	onTapOutsideDelay: _propTypes2.default.number.isRequired,
	listenToTouches: _propTypes2.default.bool.isRequired,
	children: _propTypes2.default.node.isRequired
};

OnFocusOutOrTapOutside.defaultProps = {
	// `onFocusOut` is triggered right after `onTapOutside`.
	// This workaround prevents duplicate `onFocusOut` call.
	onTapOutsideDelay: 30,
	listenToTouches: true
};
//# sourceMappingURL=OnFocusOutOrTapOutside.js.map