'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _FileUploadInput = require('./FileUploadInput');

var _FileUploadInput2 = _interopRequireDefault(_FileUploadInput);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FileUploadButton = (_temp2 = _class = function (_React$Component) {
	_inherits(FileUploadButton, _React$Component);

	function FileUploadButton() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, FileUploadButton);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FileUploadButton.__proto__ || Object.getPrototypeOf(FileUploadButton)).call.apply(_ref, [this].concat(args))), _this), _this.onClick = function () {
			_this.fileInput.click();
		}, _this.storeFileInputRef = function (ref) {
			return _this.fileInput = ref;
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(FileUploadButton, [{
		key: 'render',
		value: function render() {
			var _props = this.props,
			    Component = _props.component,
			    onChange = _props.onChange,
			    multiple = _props.multiple,
			    disabled = _props.disabled,
			    error = _props.error,
			    required = _props.required,
			    accept = _props.accept,
			    ext = _props.ext,
			    rest = _objectWithoutProperties(_props, ['component', 'onChange', 'multiple', 'disabled', 'error', 'required', 'accept', 'ext']);

			return _react2.default.createElement(
				_react2.default.Fragment,
				null,
				_react2.default.createElement(_FileUploadInput2.default, {
					ref: this.storeFileInputRef,
					onChange: onChange,
					multiple: multiple,
					disabled: disabled,
					error: error,
					required: required,
					accept: accept || ext && (0, _FileUploadInput.getAcceptFromExt)(ext) }),
				_react2.default.createElement(Component, _extends({}, rest, {
					disabled: disabled,
					onClick: this.onClick }))
			);
		}
	}]);

	return FileUploadButton;
}(_react2.default.Component), _class.propTypes = {
	component: _propTypes2.default.elementType,

	// On file(s) chosen.
	onChange: _propTypes2.default.func.isRequired,

	// Allows choosing multiple files if `true`.
	multiple: _propTypes2.default.bool,

	// Disables the file input.
	disabled: _propTypes2.default.bool,

	// Indicates that the input is invalid.
	error: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool]),

	// Whether choosing a file (or files) is required.
	// Sets `aria-required` on the file `<input/>`.
	required: _propTypes2.default.bool,

	// Can be used to restrict the file MIME-types or extensions available for selection.
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#attr-accept
	accept: _propTypes2.default.string,

	// Will be transformed to `accept`.
	ext: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.string), _propTypes2.default.string])
}, _temp2);
exports.default = FileUploadButton;
//# sourceMappingURL=FileUploadButton.js.map