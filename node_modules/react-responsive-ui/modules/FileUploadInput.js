'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.supportsMultipleFileUploadOnInputElement = exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

exports.getAcceptFromExt = getAcceptFromExt;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FileUploadInput = (_temp2 = _class = function (_React$Component) {
	_inherits(FileUploadInput, _React$Component);

	function FileUploadInput() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, FileUploadInput);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FileUploadInput.__proto__ || Object.getPrototypeOf(FileUploadInput)).call.apply(_ref, [this].concat(args))), _this), _this.onFileSelect = function (event) {
			var _this$props = _this.props,
			    onChange = _this$props.onChange,
			    multiple = _this$props.multiple;

			// Internet Explorer triggers `onChange` when setting
			// `event.target.value` manually, so ignore such events.

			if (_this.ieTimer) {
				return;
			}

			// Convert from `FileList` to an `Array`.
			var value = Array.prototype.slice.call(event.target.files);
			// `<input multiple/>` attribute is not supported in all browsers.
			onChange(multiple ? value : value[0]);

			// Internet Explorer triggers `onChange` when setting
			// `event.target.value` manually, hence the cooldown timer.
			_this.ieTimer = setTimeout(function () {
				return _this.ieTimer = undefined;
			}, 0);
			// Reset the selected file
			// so that `onChange` is triggered again next time
			// even if the user selects the same file.
			event.target.value = null;
		}, _this.click = function () {
			var disabled = _this.props.disabled;

			if (disabled) {
				return;
			}
			_this.input.click();
		}, _this.storeInputRef = function (ref) {
			return _this.input = ref;
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(FileUploadInput, [{
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			clearTimeout(this.ieTimer);
		}
	}, {
		key: 'render',
		value: function render() {
			var _props = this.props,
			    error = _props.error,
			    required = _props.required,
			    onChange = _props.onChange,
			    multiple = _props.multiple,
			    rest = _objectWithoutProperties(_props, ['error', 'required', 'onChange', 'multiple']);

			return _react2.default.createElement('input', _extends({}, rest, {
				ref: this.storeInputRef,
				type: 'file',
				multiple: supportsMultipleFileUploadOnInputElement ? multiple : undefined,
				onChange: this.onFileSelect,
				'aria-required': required ? true : undefined,
				'aria-invalid': error ? true : undefined,
				style: HIDDEN_STYLE }));
		}
	}]);

	return FileUploadInput;
}(_react2.default.Component), _class.propTypes = {
	onChange: _propTypes2.default.func.isRequired,
	multiple: _propTypes2.default.bool,
	// Indicates that the input is invalid.
	error: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool]),
	required: _propTypes2.default.bool
}, _temp2);
exports.default = FileUploadInput;


var HIDDEN_STYLE = {
	display: 'none'

	// Copied from:
	// https://github.com/react-dropzone/react-dropzone/blob/master/src/utils/index.js
};var supportsMultipleFileUploadOnInputElement = exports.supportsMultipleFileUploadOnInputElement = typeof document !== 'undefined' && document && document.createElement ? 'multiple' in document.createElement('input') : true;

/**
 * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#attr-accept
 * @param  {(string|string[])} [ext]
 * @return {string} [accept]
 */
function getAcceptFromExt(ext) {
	if (typeof ext === 'string') {
		return '.' + ext;
	}
	if (Array.isArray(ext)) {
		return ext.map(function (ext) {
			return '.' + ext;
		}).join(',');
	}
}
//# sourceMappingURL=FileUploadInput.js.map