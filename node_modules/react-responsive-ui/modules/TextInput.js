'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _TextInputComponent = require('./TextInputComponent');

var _TextInputComponent2 = _interopRequireDefault(_TextInputComponent);

var _WithError = require('./WithError');

var _WithError2 = _interopRequireDefault(_WithError);

var _reduxForm = require('./utility/redux-form');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function TextInput(_ref, ref) {
	var value = _ref.value,
	    onFocus = _ref.onFocus,
	    onBlur = _ref.onBlur,
	    indicateInvalid = _ref.indicateInvalid,
	    error = _ref.error,
	    style = _ref.style,
	    className = _ref.className,
	    password = _ref.password,
	    email = _ref.email,
	    rest = _objectWithoutProperties(_ref, ['value', 'onFocus', 'onBlur', 'indicateInvalid', 'error', 'style', 'className', 'password', 'email']);

	var _useState = (0, _react.useState)(),
	    _useState2 = _slicedToArray(_useState, 2),
	    isFocused = _useState2[0],
	    setFocused = _useState2[1];

	var _onFocus = (0, _react.useCallback)(function (event) {
		if (onFocus) {
			onFocus(event);
		}
		setFocused(true);
	}, [onFocus, setFocused]);

	var _onBlur = (0, _react.useCallback)(function (event) {
		if (onBlur) {
			(0, _reduxForm.onBlurForReduxForm)(onBlur, event, value);
		}
		setFocused(false);
	}, [onBlur, setFocused, value]);

	// Deprecated.
	// Use `type="password"` instead.
	if (password) {
		rest.type = 'password';
	}

	// Deprecated.
	// Use `type="email"` instead.
	if (email) {
		rest.type = 'email';
	}

	return _react2.default.createElement(
		_WithError2.default,
		{
			error: error,
			indicateInvalid: indicateInvalid,
			style: style,
			className: (0, _classnames2.default)(className, 'rrui__text-input', {
				'rrui__text-input--focus': isFocused
			}) },
		_react2.default.createElement(_TextInputComponent2.default, _extends({}, rest, {
			ref: ref,
			value: value,
			error: error,
			indicateInvalid: indicateInvalid,
			onFocus: _onFocus,
			onBlur: _onBlur }))
	);
}

TextInput = _react2.default.forwardRef(TextInput);

TextInput.propTypes = {
	// Text field label
	label: _propTypes2.default.string,

	// HTML form input `name` attribute
	name: _propTypes2.default.string,

	// Text field value
	value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),

	// Is called when the `value` is edited
	onChange: _propTypes2.default.func.isRequired,

	// A custom input component.
	inputComponent: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),

	// Disables the text field
	disabled: _propTypes2.default.bool,

	// Indicates that the input is invalid.
	error: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool]),

	// If this flag is `true` then the `error` is shown.
	// If this flag is `false` then the `error` is not shown (even if passed).
	indicateInvalid: _propTypes2.default.bool,

	// Set to `true` to mark the field as required
	required: _propTypes2.default.bool,

	// `<input/>` placeholder
	placeholder: _propTypes2.default.string,

	// `<textarea/>` instead of an `<input type="text"/>`
	multiline: _propTypes2.default.bool,

	// Deprecated.
	// Use `type="email"` instead.
	// Sets HTML input `type` attribute to `email`
	email: _propTypes2.default.bool,

	// Deprecated.
	// Use `type="password"` instead.
	// Sets HTML input `type` attribute to `password`
	password: _propTypes2.default.bool,

	// Autofocuses the input field.
	// Deprecated. Use `autoFocus` instead.
	focus: _propTypes2.default.bool,

	// HTML `tabindex` attribute
	tabIndex: _propTypes2.default.number,

	// `<textarea/>` `rows` attribute (row count, i.e. height)
	rows: _propTypes2.default.number,

	// `<textarea/>` `cols` attribute (column count, i.e. width)
	cols: _propTypes2.default.number,

	// Is called when the input is focused
	onFocus: _propTypes2.default.func,

	// `onKeyDown` event handler
	onKeyDown: _propTypes2.default.func,

	// Is called when the input is blurred
	onBlur: _propTypes2.default.func,

	// Is called when the input is clicked
	onClick: _propTypes2.default.func,

	// CSS style object
	style: _propTypes2.default.object,

	// CSS name
	className: _propTypes2.default.string,

	// CSS style object for `<input/>`
	inputStyle: _propTypes2.default.object
};

TextInput.defaultProps = {
	// Show `error` (if passed).
	indicateInvalid: true
};

exports.default = TextInput;
//# sourceMappingURL=TextInput.js.map