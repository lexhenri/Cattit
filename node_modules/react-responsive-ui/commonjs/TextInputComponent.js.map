{"version":3,"sources":["../source/TextInputComponent.js"],"names":["TextInputComponent","props","ref","id","value","required","floatingLabel","label","placeholder","multiline","error","indicateInvalid","containerRef","Icon","icon","className","children","rest","forwardRef","propTypes","bool","isRequired","oneOfType","string","func","defaultProps"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;AAEA;AACA,SAASA,kBAAT,CAA4BC,KAA5B,EAAmCC,GAAnC,EAAwC;AAAA,KAEtCC,EAFsC,GAYnCF,KAZmC,CAEtCE,EAFsC;AAAA,KAGtCC,KAHsC,GAYnCH,KAZmC,CAGtCG,KAHsC;AAAA,KAItCC,QAJsC,GAYnCJ,KAZmC,CAItCI,QAJsC;AAAA,KAKtCC,aALsC,GAYnCL,KAZmC,CAKtCK,aALsC;AAAA,KAMtCC,KANsC,GAYnCN,KAZmC,CAMtCM,KANsC;AAAA,KAOtCC,WAPsC,GAYnCP,KAZmC,CAOtCO,WAPsC;AAAA,KAQtCC,SARsC,GAYnCR,KAZmC,CAQtCQ,SARsC;AAAA,KAStCC,KATsC,GAYnCT,KAZmC,CAStCS,KATsC;AAAA,KAUtCC,eAVsC,GAYnCV,KAZmC,CAUtCU,eAVsC;AAAA,KAWtCC,YAXsC,GAYnCX,KAZmC,CAWtCW,YAXsC;;AAAA,KAehCC,IAfgC,GAmBnCZ,KAnBmC,CAetCa,IAfsC;AAAA,KAgBtCC,SAhBsC,GAmBnCd,KAnBmC,CAgBtCc,SAhBsC;AAAA,KAiBtCC,QAjBsC,GAmBnCf,KAnBmC,CAiBtCe,QAjBsC;AAAA,KAkBnCC,IAlBmC,4BAmBnChB,KAnBmC;;AAqBvC,QACC;AAAA;AAAA;AACC,QAAKW,YADN;AAEC,cAAW,0BAAW,aAAX,EAA0B;AACpC,8BAA2BH;AADS,IAA1B,CAFZ;AAMEI,UACA,8BAAC,IAAD,IAAM,WAAU,yBAAhB,GAPF;AAWC,uEACKI,IADL;AAEC,QAAKf,GAFN;AAGC,cAAW,0BAAWa,SAAX,EAAsB;AAChC,oCAAgCF;AADA,IAAtB,CAHZ,IAXD;AAqBEN,WACA;AAAA;AAAA;AACC,uBADD;AAEC,aAASJ,EAFV;AAGC,WAAOC,KAHR;AAIC,cAAUC,QAJX;AAKC,aAASM,mBAAmBD,KAL7B;AAMC,YAAQJ,iBAAiB,CAACE,WAN3B;AAOED;AAPF,GAtBF;AAsCES;AAtCF,EADD;AA0CA;;AAEDhB,qBAAqB,gBAAMkB,UAAN,CAAiBlB,kBAAjB,CAArB;;AAEAA,mBAAmBmB,SAAnB,GAA+B;AAC9B;AACAd,WAAW,oBAAUe,IAAV,CAAeC,UAFI;;AAI9B;AACAX,QAAO,oBAAUY,SAAV,CAAoB,CAC1B,oBAAUC,MADgB,EAE1B,oBAAUH,IAFgB,CAApB,CALuB;;AAU9B;AACAd,gBAAgB,oBAAUc,IAAV,CAAeC,UAXD;;AAa9B;AACAP,OAAO,oBAAUU;AAda,CAA/B;;AAiBAxB,mBAAmByB,YAAnB,GAAkC;AACjC;AACApB,WAAW,KAFsB;;AAIjC;AACAC,gBAAgB;AALiB,CAAlC;;kBAQeN,kB","file":"TextInputComponent.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport Input from './TextInputInput'\r\nimport Label from './TextInputLabel'\r\n\r\n// `<input/>` and its `<label/>`.\r\nfunction TextInputComponent(props, ref) {\r\n\tconst {\r\n\t\tid,\r\n\t\tvalue,\r\n\t\trequired,\r\n\t\tfloatingLabel,\r\n\t\tlabel,\r\n\t\tplaceholder,\r\n\t\tmultiline,\r\n\t\terror,\r\n\t\tindicateInvalid,\r\n\t\tcontainerRef\r\n\t} = props\r\n\r\n\tconst {\r\n\t\ticon: Icon,\r\n\t\tclassName,\r\n\t\tchildren,\r\n\t\t...rest\r\n\t} = props\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tref={containerRef}\r\n\t\t\tclassName={classNames('rrui__input', {\r\n\t\t\t\t'rrui__input--multiline' : multiline,\r\n\t\t\t})}>\r\n\r\n\t\t\t{Icon &&\r\n\t\t\t\t<Icon className=\"rrui__input-field__icon\"/>\r\n\t\t\t}\r\n\r\n\t\t\t{/* `<input/>` */}\r\n\t\t\t<Input\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tclassName={classNames(className, {\r\n\t\t\t\t\t'rrui__input-field--with-icon': Icon\r\n\t\t\t\t})}/>\r\n\r\n\t\t\t{/* Input `<label/>`. */}\r\n\t\t\t{/* It is rendered after the input to utilize the\r\n\t\t       `input:focus + label` CSS selector rule */}\r\n\t\t\t{label &&\r\n\t\t\t\t<Label\r\n\t\t\t\t\taria-hidden\r\n\t\t\t\t\tinputId={id}\r\n\t\t\t\t\tvalue={value}\r\n\t\t\t\t\trequired={required}\r\n\t\t\t\t\tinvalid={indicateInvalid && error}\r\n\t\t\t\t\tfloats={floatingLabel && !placeholder}>\r\n\t\t\t\t\t{label}\r\n\t\t\t\t</Label>\r\n\t\t\t}\r\n\r\n\t\t\t{/* `children` are placed after the `<input/>`\r\n\t\t\t    so that in cases when they're `position: absolute`\r\n\t\t\t    then their default top position is right below the `<input/>`.\r\n\t\t\t    For example, this is used in `<DatePicker/>` so that\r\n\t\t\t    the list of options is displayed right below the `<input/>`. */}\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nTextInputComponent = React.forwardRef(TextInputComponent)\r\n\r\nTextInputComponent.propTypes = {\r\n\t// Set to `true` to mark the field as required.\r\n\trequired : PropTypes.bool.isRequired,\r\n\r\n\t// Indicates that the input is invalid.\r\n\terror: PropTypes.oneOfType([\r\n\t\tPropTypes.string,\r\n\t\tPropTypes.bool\r\n\t]),\r\n\r\n\t// Labels float by default.\r\n\tfloatingLabel : PropTypes.bool.isRequired,\r\n\r\n\t// `<input/>` icon.\r\n\ticon : PropTypes.func\r\n}\r\n\r\nTextInputComponent.defaultProps = {\r\n\t// Set to `true` to mark the field as required.\r\n\trequired : false,\r\n\r\n\t// Labels float by default.\r\n\tfloatingLabel : true\r\n}\r\n\r\nexport default TextInputComponent"]}