{"version":3,"sources":["../../source/utility/isFileAccepted.js"],"names":["isFileAccepted","file","acceptedFiles","acceptedFilesArray","Array","isArray","split","fileName","name","mimeType","type","baseMimeType","replace","some","validType","trim","charAt","toLowerCase","lastIndexOf","length","ENDS_WITH_SLASH_ASTERISK_REGEXP","test"],"mappings":";;;;;kBAIwBA,c;AAJxB;AACA;AACA;AACA;AACe,SAASA,cAAT,CAAwBC,IAAxB,EAA8BC,aAA9B,EAA6C;AAC1D,MAAID,QAAQC,aAAZ,EAA2B;AACzB,QAAMC,qBAAqBC,MAAMC,OAAN,CAAcH,aAAd,IACvBA,aADuB,GAEvBA,cAAcI,KAAd,CAAoB,GAApB,CAFJ;AAGA,QAAMC,WAAWN,KAAKO,IAAL,IAAa,EAA9B;AACA,QAAMC,WAAWR,KAAKS,IAAL,IAAa,EAA9B;AACA,QAAMC,eAAeF,SAASG,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAArB;;AAEA,WAAOT,mBAAmBU,IAAnB,CAAwB,gBAAQ;AACrC,UAAMC,YAAYJ,KAAKK,IAAL,EAAlB;AACA,UAAID,UAAUE,MAAV,CAAiB,CAAjB,MAAwB,GAA5B,EAAiC;AAC/B;AACA,eAAOT,SAASU,WAAT,GAAuBC,WAAvB,CAAmCJ,UAAUG,WAAV,EAAnC,MAAgEV,SAASY,MAAT,GAAkBL,UAAUK,MAAnG;AACF;AACC,OAJD,MAIO,IAAIC,gCAAgCC,IAAhC,CAAqCP,SAArC,CAAJ,EAAqD;AAC1D;AACA,eAAOH,iBAAiBG,UAAUF,OAAV,CAAkB,OAAlB,EAA2B,EAA3B,CAAxB;AACD;AACD,aAAOH,aAAaK,SAApB;AACD,KAXM,CAAP;AAYD;AACD,SAAO,IAAP;AACD;;AAED,IAAMM,kCAAkC,MAAxC","file":"isFileAccepted.js","sourcesContent":["// Copy-pasted from:\r\n// https://github.com/okonet/attr-accept\r\n// because in that repo it imports `.some` and `.endsWith` from `core-js`.\r\n// `.some` is supported starting from IE 9.\r\nexport default function isFileAccepted(file, acceptedFiles) {\r\n  if (file && acceptedFiles) {\r\n    const acceptedFilesArray = Array.isArray(acceptedFiles)\r\n      ? acceptedFiles\r\n      : acceptedFiles.split(',')\r\n    const fileName = file.name || ''\r\n    const mimeType = file.type || ''\r\n    const baseMimeType = mimeType.replace(/\\/.*$/, '')\r\n\r\n    return acceptedFilesArray.some(type => {\r\n      const validType = type.trim()\r\n      if (validType.charAt(0) === '.') {\r\n        // return fileName.toLowerCase().endsWith(validType.toLowerCase())\r\n        return fileName.toLowerCase().lastIndexOf(validType.toLowerCase()) === fileName.length - validType.length\r\n      // } else if (validType.endsWith('/*')) {\r\n      } else if (ENDS_WITH_SLASH_ASTERISK_REGEXP.test(validType)) {\r\n        // This is something like a image/* mime type\r\n        return baseMimeType === validType.replace(/\\/.*$/, '')\r\n      }\r\n      return mimeType === validType\r\n    })\r\n  }\r\n  return true\r\n}\r\n\r\nconst ENDS_WITH_SLASH_ASTERISK_REGEXP = /\\/*$/"]}