'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.FILES = exports.FILE = exports.Files = exports.File = exports.DropFiles = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

exports.getFilesFromEvent = getFilesFromEvent;
exports.CanDrop = CanDrop;
exports.DragAndDrop = DragAndDrop;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactCreateRef = require('react-create-ref');

var _reactCreateRef2 = _interopRequireDefault(_reactCreateRef);

var _isFileAccepted = require('./utility/isFileAccepted');

var _isFileAccepted2 = _interopRequireDefault(_isFileAccepted);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DropFiles_ = (_temp2 = _class = function (_React$Component) {
	_inherits(DropFiles_, _React$Component);

	function DropFiles_() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, DropFiles_);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DropFiles_.__proto__ || Object.getPrototypeOf(DropFiles_)).call.apply(_ref, [this].concat(args))), _this), _this.node = (0, _reactCreateRef2.default)(), _this.dragTargets = [], _this.setRef = function (ref) {
			_this.node.current = ref;
			// A hack for providing `.focus()` method on `<DropFileUpload/>`.
			var ref_ = _this.props.ref_;

			if (ref_) {
				ref_.current = ref;
			}
		}, _this.setDraggedOver = function (draggedOver) {
			var setDraggedOver = _this.props.setDraggedOver;

			if (setDraggedOver) {
				setDraggedOver(draggedOver);
			}
		}, _this.onDragOver = function (event) {
			event.preventDefault();
			event.stopPropagation();
		}, _this.onDragEnter = function (event) {
			event.preventDefault();
			event.stopPropagation();

			// Copied from:
			// https://github.com/react-dropzone/react-dropzone/blob/master/src/index.js
			// Count the dropzone and any children that are entered.
			if (_this.dragTargets.indexOf(event.target) === -1) {
				_this.dragTargets.push(event.target);
			}

			// `event.dataTransfer.files` are only accessible on "drop" event.
			// `event.dataTransfer.items` are only accessible in Chrome and FireFox while dragging.
			// https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/items
			if (isDraggingFiles(event)) {
				// Filtering dragged files by `isFileAccepted`.
				// Only MIME-types are available during the "drag" stage,
				// not file extensions. And won't work in IE11.
				// // IE11 does not support dataTransfer.items
				// if (event.dataTransfer.items) {
				// 	// Only MIME-types are available for `isFileAccepted`
				// 	// filtering during the "drag" stage, not file extensions.
				// 	// `.some` is supported starting from IE 9.
				// 	const areAnyFilesAccepted = Array.prototype.some.call(
				// 		event.dataTransfer.items,
				// 		this.isFileAccepted
				// 	)
				// 	if (!areAnyFilesAccepted) {
				// 		return
				// 	}
				// }
				_this.setDraggedOver(true);
			}
		}, _this.onDragLeave = function (event) {
			event.preventDefault();
			event.stopPropagation();

			// Copied from:
			// https://github.com/react-dropzone/react-dropzone/blob/master/src/index.js
			// Only deactivate once the dropzone and all children have been left.
			_this.dragTargets = _this.dragTargets.filter(function (_) {
				return _ !== event.target && _this.node.current.contains(_);
			});
			if (_this.dragTargets.length > 0) {
				return;
			}

			_this.setDraggedOver(false);
		}, _this.onDrop = function (event) {
			var _this$props = _this.props,
			    onDrop = _this$props.onDrop,
			    multiple = _this$props.multiple,
			    accept = _this$props.accept;


			event.preventDefault();
			event.stopPropagation();

			// Reset.
			_this.dragTargets = [];

			_this.setDraggedOver(false);

			var files = getFilesFromEvent(event); //.filter(this.isFileAccepted)
			if (files.length > 0) {
				if (multiple) {
					onDrop(files, {
						acceptedFiles: accept ? files.filter(_this.isFileAccepted) : files,
						rejectedFiles: accept ? files.filter(function (_) {
							return !_this.isFileAccepted(_);
						}) : []
					});
				} else {
					// If multiple files have been dropped to a non-multiple drop zone
					// then reduce the files list to just the first file.
					onDrop(files[0], {
						isAccepted: _this.isFileAccepted(files[0])
					});
				}
				// Not clear why would it be called.
				// MDN says it's a "no-op".
				// https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/clear
				// event.dataTransfer.clearData()
			}
		}, _this.isFileAccepted = function (file) {
			var accept = _this.props.accept;

			if (accept) {
				// Firefox versions prior to 53 return a bogus MIME type for every file drag, so dragovers with
				// that MIME type will always be accepted
				if (file.type === 'application/x-moz-file') {
					return true;
				}
				return (0, _isFileAccepted2.default)(file, accept);
			}
			return true;
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	// state = {
	// 	isDragging: false
	// }

	// Copied from:
	// https://github.com/react-dropzone/react-dropzone/blob/master/src/index.js


	// Must be `preventDefault`-ed for some weird reasons.


	// `event` is always triggered when gragging from another window to the browser window.


	_createClass(DropFiles_, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var div = this.node.current;
			div.addEventListener('dragenter', this.onDragEnter);
			div.addEventListener('dragleave', this.onDragLeave);
			div.addEventListener('dragover', this.onDragOver);
			div.addEventListener('drop', this.onDrop);
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			var div = this.node.current;
			div.removeEventListener('dragenter', this.onDragEnter);
			div.removeEventListener('dragleave', this.onDragLeave);
			div.removeEventListener('dragover', this.onDragOver);
			div.removeEventListener('drop', this.onDrop);
		}
	}, {
		key: 'render',
		value: function render() {
			var _props = this.props,
			    onDrop = _props.onDrop,
			    setDraggedOver = _props.setDraggedOver,
			    multiple = _props.multiple,
			    ref_ = _props.ref_,
			    rest = _objectWithoutProperties(_props, ['onDrop', 'setDraggedOver', 'multiple', 'ref_']);

			return _react2.default.createElement('div', _extends({
				ref: this.setRef
			}, rest));
		}
	}]);

	return DropFiles_;
}(_react2.default.Component), _class.propTypes = {
	// Will be called with `true` when the drop zone is dragged over.
	// (and with `false` when it's no longer dragged over)
	setDraggedOver: _propTypes2.default.func,
	// Will be called on file(s) drop.
	// The argument will be the single file when `multiple` is `false` (default)
	// or the array of files when `multiple` is `true`.
	onDrop: _propTypes2.default.func.isRequired,
	// Set to `true` for multi-file drop.
	multiple: _propTypes2.default.bool,
	// Can be used to restrict the file MIME-types or extensions available for selection.
	// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#attr-accept
	accept: _propTypes2.default.string,
	// A hack for `React.forwardRef()`.
	// Could be rewritten in "hooks" instead.
	// A hack for providing `.focus()` method on `<DropFileUpload/>`.
	ref_: _propTypes2.default.object }, _temp2);

// A hack for providing `.focus()` method on `<DropFileUpload/>`.

var DropFiles = exports.DropFiles = _react2.default.forwardRef(function (props, ref) {
	return _react2.default.createElement(DropFiles_, _extends({ ref_: ref }, props));
});

// Copied from:
// https://github.com/react-dropzone/react-dropzone/blob/master/src/utils/index.js
function isDraggingFiles(event) {
	// If `event.dataTransfer` is not available then `event.target.files` fallback is used.
	if (!event.dataTransfer) {
		return true;
	}
	// https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/types
	// https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#file
	// `.some` is supported starting from IE 9.
	return Array.prototype.some.call(event.dataTransfer.types, function (type) {
		return type === 'Files' || type === 'application/x-moz-file';
	});
}

// Copied from:
// https://github.com/react-dropzone/react-dropzone/blob/master/src/utils/index.js
function getFilesFromEvent(event) {
	var dataTransferItemsList = [];
	if (event.dataTransfer) {
		var dt = event.dataTransfer;
		// NOTE: Only the 'drop' event has access to DataTransfer.files,
		// otherwise it will always be empty
		if (dt.files && dt.files.length) {
			dataTransferItemsList = dt.files;
		} else if (dt.items && dt.items.length) {
			// During the drag even the dataTransfer.files is null
			// but Chrome implements some drag store, which is accesible via dataTransfer.items
			dataTransferItemsList = dt.items;
		}
	} else if (event.target && event.target.files) {
		dataTransferItemsList = event.target.files;
	}
	// Convert from DataTransferItemsList to the native Array
	return Array.prototype.slice.call(dataTransferItemsList);
}

// // Copied from:
// // https://github.com/react-dropzone/react-dropzone/blob/master/src/utils/index.js
// // Firefox versions prior to 53 return a bogus MIME type for every file drag, so dragovers with
// // that MIME type will always be accepted
// function isFileAccepted(file, accept) {
// 	return this.props.isFileAccepted(file) || (file.type === 'application/x-moz-file' || this.props.isFileTypeAccepted(file))
// }

// Deprecated.
function CanDrop(type, drop) {
	throw new Error('`react-dnd` has been removed from `react-responsive-ui` starting from version `0.14.124` due to being buggy and not supported. `react-dnd` has been replaced with simple native HTML file drag-n-drop. Use `<DropFileUpload/>` and `<DropMultiFileUpload/>` components for file upload instead of `DragAndDrop` and `CanDrop` decorators.');
}

// Deprecated.
function DragAndDrop() {
	throw new Error('`react-dnd` has been removed from `react-responsive-ui` starting from version `0.14.124` due to being buggy and not supported. `react-dnd` has been replaced with simple native HTML file drag-n-drop. `DragAndDrop` decorator is no longer needed and should be removed. Use `<DropFileUpload/>` and `<DropMultiFileUpload/>` components for file upload.');
}

// Deprecated.
// Native file drag'n'drop (single file)
var File = exports.File = 'File';

// Deprecated.
// Native file drag'n'drop (multiple files)
var Files = exports.Files = 'Files';

// Deprecated.
// Native file drag'n'drop (single file)
var FILE = exports.FILE = File;

// Deprecated.
// Native file drag'n'drop (multiple files)
var FILES = exports.FILES = Files;
//# sourceMappingURL=DragAndDrop.js.map