{"version":3,"sources":["../source/DragAndDrop.js"],"names":["getFilesFromEvent","CanDrop","DragAndDrop","DropFiles_","node","dragTargets","setRef","ref","current","ref_","props","setDraggedOver","draggedOver","onDragOver","event","preventDefault","stopPropagation","onDragEnter","indexOf","target","push","isDraggingFiles","onDragLeave","filter","_","contains","length","onDrop","multiple","accept","files","acceptedFiles","isFileAccepted","rejectedFiles","isAccepted","file","type","div","addEventListener","removeEventListener","rest","createElement","Component","propTypes","func","isRequired","bool","string","object","DropFiles","forwardRef","dataTransfer","Array","prototype","some","call","types","dataTransferItemsList","dt","items","slice","drop","Error","File","Files","FILE","FILES"],"mappings":"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","file":"DragAndDrop.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport createRef from 'react-create-ref'\r\n\r\nimport isFileAccepted from './utility/isFileAccepted'\r\n\r\nclass DropFiles_ extends React.Component {\r\n\tstatic propTypes = {\r\n\t\t// Will be called with `true` when the drop zone is dragged over.\r\n\t\t// (and with `false` when it's no longer dragged over)\r\n\t\tsetDraggedOver: PropTypes.func,\r\n\t\t// Will be called on file(s) drop.\r\n\t\t// The argument will be the single file when `multiple` is `false` (default)\r\n\t\t// or the array of files when `multiple` is `true`.\r\n\t\tonDrop: PropTypes.func.isRequired,\r\n\t\t// Set to `true` for multi-file drop.\r\n\t\tmultiple: PropTypes.bool,\r\n\t\t// Can be used to restrict the file MIME-types or extensions available for selection.\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#attr-accept\r\n\t\taccept: PropTypes.string,\r\n\t\t// A hack for `React.forwardRef()`.\r\n\t\t// Could be rewritten in \"hooks\" instead.\r\n\t\t// A hack for providing `.focus()` method on `<DropFileUpload/>`.\r\n\t\tref_: PropTypes.object\r\n\t}\r\n\r\n\t// state = {\r\n\t// \tisDragging: false\r\n\t// }\r\n\r\n\tnode = createRef()\r\n\r\n\t// Copied from:\r\n\t// https://github.com/react-dropzone/react-dropzone/blob/master/src/index.js\r\n\tdragTargets = []\r\n\r\n\tsetRef = (ref) => {\r\n\t\tthis.node.current = ref\r\n\t\t// A hack for providing `.focus()` method on `<DropFileUpload/>`.\r\n\t\tconst { ref_ } = this.props\r\n\t\tif (ref_) {\r\n\t\t\tref_.current = ref\r\n\t\t}\r\n\t}\r\n\r\n\tsetDraggedOver = (draggedOver) => {\r\n\t\tconst { setDraggedOver } = this.props\r\n\t\tif (setDraggedOver) {\r\n\t\t\tsetDraggedOver(draggedOver)\r\n\t\t}\r\n\t}\r\n\r\n\t// Must be `preventDefault`-ed for some weird reasons.\r\n\tonDragOver = (event) => {\r\n\t\tevent.preventDefault()\r\n\t\tevent.stopPropagation()\r\n\t}\r\n\r\n\t// `event` is always triggered when gragging from another window to the browser window.\r\n\tonDragEnter = (event) => {\r\n\t\tevent.preventDefault()\r\n\t\tevent.stopPropagation()\r\n\r\n\t\t// Copied from:\r\n\t\t// https://github.com/react-dropzone/react-dropzone/blob/master/src/index.js\r\n\t\t// Count the dropzone and any children that are entered.\r\n\t\tif (this.dragTargets.indexOf(event.target) === -1) {\r\n\t\t\tthis.dragTargets.push(event.target)\r\n\t\t}\r\n\r\n\t\t// `event.dataTransfer.files` are only accessible on \"drop\" event.\r\n\t\t// `event.dataTransfer.items` are only accessible in Chrome and FireFox while dragging.\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/items\r\n\t\tif (isDraggingFiles(event)) {\r\n\t\t\t// Filtering dragged files by `isFileAccepted`.\r\n\t\t\t// Only MIME-types are available during the \"drag\" stage,\r\n\t\t\t// not file extensions. And won't work in IE11.\r\n\t\t\t// // IE11 does not support dataTransfer.items\r\n\t\t\t// if (event.dataTransfer.items) {\r\n\t\t\t// \t// Only MIME-types are available for `isFileAccepted`\r\n\t\t\t// \t// filtering during the \"drag\" stage, not file extensions.\r\n\t\t\t// \t// `.some` is supported starting from IE 9.\r\n\t\t\t// \tconst areAnyFilesAccepted = Array.prototype.some.call(\r\n\t\t\t// \t\tevent.dataTransfer.items,\r\n\t\t\t// \t\tthis.isFileAccepted\r\n\t\t\t// \t)\r\n\t\t\t// \tif (!areAnyFilesAccepted) {\r\n\t\t\t// \t\treturn\r\n\t\t\t// \t}\r\n\t\t\t// }\r\n\t\t\tthis.setDraggedOver(true)\r\n\t\t}\r\n\t}\r\n\r\n\tonDragLeave = (event) => {\r\n\t\tevent.preventDefault()\r\n\t\tevent.stopPropagation()\r\n\r\n\t\t// Copied from:\r\n\t\t// https://github.com/react-dropzone/react-dropzone/blob/master/src/index.js\r\n\t\t// Only deactivate once the dropzone and all children have been left.\r\n\t\tthis.dragTargets = this.dragTargets.filter(_ => _ !== event.target && this.node.current.contains(_))\r\n\t\tif (this.dragTargets.length > 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tthis.setDraggedOver(false)\r\n\t}\r\n\r\n\tonDrop = (event) => {\r\n\t\tconst {\r\n\t\t\tonDrop,\r\n\t\t\tmultiple,\r\n\t\t\taccept\r\n\t\t} = this.props\r\n\r\n\t\tevent.preventDefault()\r\n\t\tevent.stopPropagation()\r\n\r\n\t\t// Reset.\r\n\t\tthis.dragTargets = []\r\n\r\n\t\tthis.setDraggedOver(false)\r\n\r\n\t\tconst files = getFilesFromEvent(event) //.filter(this.isFileAccepted)\r\n\t\tif (files.length > 0) {\r\n\t\t\tif (multiple) {\r\n\t\t\t\tonDrop(files, {\r\n\t\t\t\t\tacceptedFiles: accept ? files.filter(this.isFileAccepted) : files,\r\n\t\t\t\t\trejectedFiles: accept ? files.filter(_ => !this.isFileAccepted(_)) : []\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\t// If multiple files have been dropped to a non-multiple drop zone\r\n\t\t\t\t// then reduce the files list to just the first file.\r\n\t\t\t\tonDrop(files[0], {\r\n\t\t\t\t\tisAccepted: this.isFileAccepted(files[0])\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\t// Not clear why would it be called.\r\n\t\t\t// MDN says it's a \"no-op\".\r\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/clear\r\n\t\t\t// event.dataTransfer.clearData()\r\n\t\t}\r\n\t}\r\n\r\n\tisFileAccepted = (file) => {\r\n\t\tconst { accept } = this.props\r\n\t\tif (accept) {\r\n\t\t\t// Firefox versions prior to 53 return a bogus MIME type for every file drag, so dragovers with\r\n\t\t\t// that MIME type will always be accepted\r\n\t\t\tif (file.type === 'application/x-moz-file') {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t\treturn isFileAccepted(file, accept)\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst div = this.node.current\r\n\t\tdiv.addEventListener('dragenter', this.onDragEnter)\r\n\t\tdiv.addEventListener('dragleave', this.onDragLeave)\r\n\t\tdiv.addEventListener('dragover', this.onDragOver)\r\n\t\tdiv.addEventListener('drop', this.onDrop)\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tconst div = this.node.current\r\n\t\tdiv.removeEventListener('dragenter', this.onDragEnter)\r\n\t\tdiv.removeEventListener('dragleave', this.onDragLeave)\r\n\t\tdiv.removeEventListener('dragover', this.onDragOver)\r\n\t\tdiv.removeEventListener('drop', this.onDrop)\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\tonDrop,\r\n\t\t\tsetDraggedOver,\r\n\t\t\tmultiple,\r\n\t\t\tref_,\r\n\t\t\t...rest\r\n\t\t} = this.props\r\n\r\n\t\treturn React.createElement('div', {\r\n\t\t\tref: this.setRef,\r\n\t\t\t...rest\r\n\t\t})\r\n\t}\r\n}\r\n\r\n// A hack for providing `.focus()` method on `<DropFileUpload/>`.\r\nexport const DropFiles = React.forwardRef((props, ref) => (\r\n\t<DropFiles_ ref_={ref} {...props}/>\r\n))\r\n\r\n// Copied from:\r\n// https://github.com/react-dropzone/react-dropzone/blob/master/src/utils/index.js\r\nfunction isDraggingFiles(event) {\r\n\t// If `event.dataTransfer` is not available then `event.target.files` fallback is used.\r\n\tif (!event.dataTransfer) {\r\n\t\treturn true\r\n\t}\r\n\t// https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/types\r\n\t// https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#file\r\n\t// `.some` is supported starting from IE 9.\r\n\treturn Array.prototype.some.call(\r\n\t\tevent.dataTransfer.types,\r\n\t\ttype => type === 'Files' || type === 'application/x-moz-file'\r\n\t)\r\n}\r\n\r\n// Copied from:\r\n// https://github.com/react-dropzone/react-dropzone/blob/master/src/utils/index.js\r\nexport function getFilesFromEvent(event) {\r\n\tlet dataTransferItemsList = []\r\n\tif (event.dataTransfer) {\r\n\t\tconst dt = event.dataTransfer\r\n\t\t// NOTE: Only the 'drop' event has access to DataTransfer.files,\r\n\t\t// otherwise it will always be empty\r\n\t\tif (dt.files && dt.files.length) {\r\n\t\t\tdataTransferItemsList = dt.files\r\n\t\t} else if (dt.items && dt.items.length) {\r\n\t\t\t// During the drag even the dataTransfer.files is null\r\n\t\t\t// but Chrome implements some drag store, which is accesible via dataTransfer.items\r\n\t\t\tdataTransferItemsList = dt.items\r\n\t\t}\r\n\t} else if (event.target && event.target.files) {\r\n\t\tdataTransferItemsList = event.target.files\r\n\t}\r\n\t// Convert from DataTransferItemsList to the native Array\r\n\treturn Array.prototype.slice.call(dataTransferItemsList)\r\n}\r\n\r\n// // Copied from:\r\n// // https://github.com/react-dropzone/react-dropzone/blob/master/src/utils/index.js\r\n// // Firefox versions prior to 53 return a bogus MIME type for every file drag, so dragovers with\r\n// // that MIME type will always be accepted\r\n// function isFileAccepted(file, accept) {\r\n// \treturn this.props.isFileAccepted(file) || (file.type === 'application/x-moz-file' || this.props.isFileTypeAccepted(file))\r\n// }\r\n\r\n// Deprecated.\r\nexport function CanDrop(type, drop)\r\n{\r\n\tthrow new Error('`react-dnd` has been removed from `react-responsive-ui` starting from version `0.14.124` due to being buggy and not supported. `react-dnd` has been replaced with simple native HTML file drag-n-drop. Use `<DropFileUpload/>` and `<DropMultiFileUpload/>` components for file upload instead of `DragAndDrop` and `CanDrop` decorators.')\r\n}\r\n\r\n// Deprecated.\r\nexport function DragAndDrop()\r\n{\r\n\tthrow new Error('`react-dnd` has been removed from `react-responsive-ui` starting from version `0.14.124` due to being buggy and not supported. `react-dnd` has been replaced with simple native HTML file drag-n-drop. `DragAndDrop` decorator is no longer needed and should be removed. Use `<DropFileUpload/>` and `<DropMultiFileUpload/>` components for file upload.')\r\n}\r\n\r\n// Deprecated.\r\n// Native file drag'n'drop (single file)\r\nexport const File = 'File'\r\n\r\n// Deprecated.\r\n// Native file drag'n'drop (multiple files)\r\nexport const Files = 'Files'\r\n\r\n// Deprecated.\r\n// Native file drag'n'drop (single file)\r\nexport const FILE = File\r\n\r\n// Deprecated.\r\n// Native file drag'n'drop (multiple files)\r\nexport const FILES = Files"]}