{"version":3,"sources":["../source/Autocomplete.js"],"names":["PureComponent","Component","empty_value_option_value","Autocomplete","state","optionsCounter","matchesCounter","inputValue","options","props","latestFetchOptionsCallTimestamp","counter","Counter","onPreloadStateChange","isPreloading","setState","isFetchingOptions","focus","input","onCollapse","collapsedDueToItemBeingSelected","focusOut","selectedOption","isExpanded","matches","undefined","collapsedDueToEmptyValueOnEnter","label","dontExpandOnFocus","onExpand","onFocusItem","i","interaction","focusedOptionIndex","expand","_expand","parameters","list","collapse","toggle","storeListRef","ref","storeInput","node","storeInputComponentNode","inputComponentNode","getInputNode","expandOnFocus","onInputValueChange","value","focusItem","refresh","onKeyDown","event","disabled","required","highlightFirstOption","defaultPrevented","ctrlKey","altKey","shiftKey","metaKey","keyCode","getFocusedItemIndex","clearFocus","preventDefault","length","setValue","isEmptyValue","chooseFocusedItem","fetchDefaultOptions","getOptions","filterOptions","Promise","resolve","then","refreshOptions","throttleFetchOptionsCall","Date","now","getNextCounter","fetchingOptionsCounter","handleNewOptions","newOptions","receiveNewOptions","catch","error","console","newValue","onChange","filter","_","onBlur","onClick","onFocusOut","window","rruiCollapseOnFocusOut","getOption","id","document","getElementById","generateRandomString","Error","isFetchingInitiallySelectedOption","option","clearTimeout","nextFetchOptionsCallTimeout","icon","compact","scroll","scrollMaxItems","scrollIntoView","alignment","saveOnIcons","optionComponent","placeholder","indicateInvalid","closeButtonIcon","closeLabel","style","className","containerStyle","textAlign","renderTextInput","trim","getOptionsForRendering","map","content","tabIndex","autoFocus","autoComplete","inputClassName","Icon","maxOptions","slice","throttle","minCharactersToStartThrottling","wait","setTimeout","latestFetchOptionsCall","callback","newState","isCounterAfter","Array","isArray","propTypes","arrayOf","shape","any","string","oneOfType","func","isRequired","number","elementType","name","bool","object","defaultProps","loading","toLowerCase","indexOf","MAX_SAFE_INTEGER","Number","Math","pow","currentStateCounter","diff","abs","random","toString","replace"],"mappings":";;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;;;;;;;;;AAEA;AACA,IAAMA,gBAAgB,gBAAMA,aAAN,IAAuB,gBAAMC,SAAnD;;AAEA,IAAMC,2BAA2B,EAAjC;;IAGqBC,Y;;;;;;;;;;;;;;gMA2MpBC,K,GACA;AACC;AACA;AACA;AACA;AACAC,mBAAiB,CALlB;AAMCC,mBAAiB,CANlB;;AAQCC,eAAa,EARd;AASCC,YAAS,EATV;;AAWC;AACAC,UAAO;;AAGR;AAfA,G,QAgBAC,+B,GAAkC,C,QAIlCC,O,GAAU,IAAIC,OAAJ,E,QA8EVC,oB,GAAuB,UAACC,YAAD;AAAA,UAAkB,MAAKC,QAAL,CAAc,EAAEC,mBAAoBF,YAAtB,EAAd,CAAlB;AAAA,G,QAEvBG,K,GAAQ;AAAA,UAAM,MAAKC,KAAL,CAAWD,KAAX,EAAN;AAAA,G,QAERE,U,GAAa,iBACb;AAAA,OADgBC,+BAChB,SADgBA,+BAChB;AAAA,OADiDC,QACjD,SADiDA,QACjD;AAAA,qBACqC,MAAKjB,KAD1C;AAAA,OACSI,OADT,eACSA,OADT;AAAA,OACkBc,cADlB,eACkBA,cADlB;;;AAGC,SAAKP,QAAL,CACC;AACAQ,gBAAa,KADb;AAEAC,aAAUC;AAFV,IADD;;AAMA,OAAI,CAACL,+BAAD,IAAoC,CAAC,MAAKM,+BAA9C,EACA;AACC,UAAKX,QAAL,CACC;AACAR,iBAAae,iBAAiBA,eAAeK,KAAhC,GAAwC;AADrD,KADD;AAIA;;AAED,OAAI,CAACN,QAAL,EACA;AACC,UAAKO,iBAAL,GAAyB,IAAzB;AACA,UAAKX,KAAL;AACA,UAAKW,iBAAL,GAAyB,KAAzB;AACA;AACD,G,QAEDC,Q,GAAW,YACX;AAAA,OADYrB,OACZ,uEADsB,EACtB;;AACC,SAAKO,QAAL,CAAc,EAAEQ,YAAY,IAAd,EAAd;AACA,G,QAEDO,W,GAAc,UAACC,CAAD,EAAIvB,OAAJ,EAAgB;AAC7B,OAAIA,QAAQwB,WAAZ,EAAyB;AACxB,UAAKjB,QAAL,CAAc,EAAEkB,oBAAoBF,CAAtB,EAAd;AACA,IAFD,MAEO;AACN,UAAKhB,QAAL,CAAc,EAAEkB,oBAAoBR,SAAtB,EAAd;AACA;AACD,G,QAEDS,M,GAAS,YACT;AACC;AACA,SAAKnB,QAAL,CAAc,EAAES,SAAS,IAAX,EAAd,EAAiC,MAAKW,OAAtC;AACA,G,QAEDA,O,GAAW,UAACC,UAAD;AAAA,UAAgB,MAAKC,IAAL,CAAUH,MAAV,CAAiBE,UAAjB,CAAhB;AAAA,G,QACXE,Q,GAAW;AAAA,UAAM,MAAKD,IAAL,CAAUC,QAAV,EAAN;AAAA,G,QACXC,M,GAAW;AAAA,UAAM,MAAKF,IAAL,CAAUE,MAAV,EAAN;AAAA,G,QAEXC,Y,GAAe,UAACC,GAAD;AAAA,UAAS,MAAKJ,IAAL,GAAYI,GAArB;AAAA,G,QACfC,U,GAAa,UAACC,IAAD;AAAA,UAAU,MAAKzB,KAAL,GAAayB,IAAvB;AAAA,G,QACbC,uB,GAA0B,UAACD,IAAD;AAAA,UAAU,MAAKE,kBAAL,GAA0BF,IAApC;AAAA,G,QAE1BG,Y,GAAe;AAAA,UAAM,MAAK5B,KAAX;AAAA,G,QA4Nf6B,a,GAAgB,YAChB;AACC,OAAI,MAAKnB,iBAAT,EAA4B;AAC3B;AACA;;AAHF,OAKSL,UALT,GAKwB,MAAKnB,KAL7B,CAKSmB,UALT;;;AAOC,OAAI,CAACA,UAAL,EACA;AACC,UAAKR,QAAL,CAAc,EAAES,SAAS,IAAX,EAAd,EAAiC,MAAKU,MAAtC;AACA;AACD,G,QAEDc,kB,GAAqB,UAACC,KAAD,EACrB;AAAA,OACS1B,UADT,GACwB,MAAKnB,KAD7B,CACSmB,UADT;;AAGC;AACA;AACA;AACA;;AACA,OAAI,CAAC0B,KAAD,IAAU1B,UAAd,EAA0B;AACzB,UAAKc,IAAL,CAAUa,SAAV,CAAoBzB,SAApB;AACA;;AAED,SAAKV,QAAL,CAAc;AACbR,gBAAa0C;AADA,IAAd,EAEG,YAAM;AACR,UAAKd,OAAL,CAAa,EAAEgB,SAAS,IAAX,EAAb;AACA,IAJD;AAKA,G,QAEDC,S,GAAY,UAACC,KAAD,EACZ;AAAA,qBAC6D,MAAK5C,KADlE;AAAA,OACS6C,QADT,eACSA,QADT;AAAA,OACmBL,KADnB,eACmBA,KADnB;AAAA,OAC0BM,QAD1B,eAC0BA,QAD1B;AAAA,OACoCC,oBADpC,eACoCA,oBADpC;AAAA,sBAEiE,MAAKpD,KAFtE;AAAA,OAESI,OAFT,gBAESA,OAFT;AAAA,OAEkBe,UAFlB,gBAEkBA,UAFlB;AAAA,OAE8BhB,UAF9B,gBAE8BA,UAF9B;AAAA,OAE0C0B,kBAF1C,gBAE0CA,kBAF1C;;;AAIC,OAAIqB,QAAJ,EAAc;AACb;AACA;;AAED,OAAID,MAAMI,gBAAV,EAA4B;AAC3B;AACA;;AAED,OAAI,CAAClC,UAAL,EAAiB;AAChB,QAAI,gCAAsB8B,KAAtB,EAA6B,MAAKnC,KAAlC,CAAJ,EAA8C;AAC7C;AACA;AACD;;AAED,OAAImC,MAAMK,OAAN,IAAiBL,MAAMM,MAAvB,IAAiCN,MAAMO,QAAvC,IAAmDP,MAAMQ,OAA7D,EAAsE;AACrE;AACA;;AAED,WAAQR,MAAMS,OAAd;AAEC;AACA;AACA,SAAK,EAAL;AACC,SAAIvC,UAAJ,EACA;AACC;AACA,UAAI,MAAKc,IAAL,CAAU0B,mBAAV,OAAoCtC,SAAxC,EACA,CAEC;AADA;;AAED;AAJA,WAKK,IAAI,MAAKY,IAAL,CAAU0B,mBAAV,OAAoC,CAAxC,EACL;AACC;AACA,YAAI,CAACP,oBAAL,EAA2B;AAC1B,eAAKnB,IAAL,CAAU2B,UAAV;AACA;AACDX,cAAMY,cAAN;AACA,QAPI,MASL;AACC,cAAK5B,IAAL,CAAUe,SAAV,CAAoBC,KAApB;AACA;AACD;AACD;;AAED;AACA;AACA,SAAK,EAAL;AACC,SAAI9B,UAAJ,EAAgB;AACf;AACA;AACA;AACA;AACA;AACA,UAAIiC,wBACHvB,uBAAuBR,SADpB,IAEHjB,QAAQ0D,MAAR,KAAmB,CAFpB,EAEuB;AACtB,aAAKnD,QAAL,CAAc,EAAEkB,oBAAoB,CAAtB,EAAd;AACA,OAJD,MAIO;AACN;AACA,aAAKI,IAAL,CAAUe,SAAV,CAAoBC,KAApB;AACA;AACD,MAdD,MAcO;AACN;AACAA,YAAMY,cAAN;AACA,YAAK/B,MAAL;AACA;AACD;;AAED;AACA,SAAK,EAAL;AACA;AACA,SAAK,EAAL;AACC;AACA,SAAIX,UAAJ,EAAgB;AACf,YAAKc,IAAL,CAAU2B,UAAV;AACA,UAAIR,oBAAJ,EAA0B;AACzB,aAAKnB,IAAL,CAAUa,SAAV,CAAoB,CAApB;AACA;AACD;AACD;;AAED;AACA;AACA,SAAK,EAAL;AACCG,WAAMY,cAAN;AACA,WAAK3B,QAAL;AACA;;AAED;AACA,SAAK,EAAL;AACC,SAAI,CAAC/B,UAAL,EACA;AACC;AACA;AACA,UAAIgB,cAAc,MAAKc,IAAL,CAAU0B,mBAAV,OAAoCtC,SAAtD,EACA;AACC;AACA4B,aAAMY,cAAN;AACA,aAAKE,QAAL,CAAc1C,SAAd;;AAEA,aAAKC,+BAAL,GAAuC,IAAvC;AACA,aAAKY,QAAL;AACA,aAAKZ,+BAAL,GAAuCD,SAAvC;;AAEA;AACA;;AAED,UAAI,CAACF,UAAL,EACA;AACC;AACA;AACA,WAAI6C,aAAanB,KAAb,CAAJ,EACA;AACC;AACA,YAAIM,QAAJ,EACA;AACC;AACAF,eAAMY,cAAN;AACA,eAAK/B,MAAL;AACA;AACD;AACA;;AAED;AACA;AACA;AACA;AACA;AACAmB,aAAMY,cAAN;AACA,aAAKE,QAAL,CAAc1C,SAAd;AACA;AACA;AACD;;AAED;AACA,SAAIF,UAAJ,EACA;AACC;AACA8B,YAAMY,cAAN;AACA;AACA,YAAK5B,IAAL,CAAUgC,iBAAV;AACA;;AAED;AA/HF;AAiIA,G,QAgCDC,mB,GAAsB,YACtB;AAAA,sBAMG,MAAK7D,KANR;AAAA,OAGE8D,UAHF,gBAGEA,UAHF;AAAA,OAIEC,aAJF,gBAIEA,aAJF;;;AAQC,UAAOC,QAAQC,OAAR,GAAkBC,IAAlB,CAAuB,YAC9B;AACC,WAAOJ,aAAaA,WAAW,EAAX,CAAb,GAA8BC,cAAc,MAAK/D,KAAL,CAAWD,OAAzB,EAAkC,EAAlC,CAArC;AACA,IAHM,EAINmE,IAJM,CAID,UAACnE,OAAD,EACN;AACC,WAAO,IAAIiE,OAAJ,CAAY;AAAA,YAAW,MAAK1D,QAAL,CAAc,EAAEP,gBAAF,EAAd,EAA2BkE,OAA3B,CAAX;AAAA,KAAZ,CAAP;AACA,IAPM,CAAP;AAQA,G,QAEDE,c,GAAiB,YACjB;AAAA,sBAMG,MAAKnE,KANR;AAAA,OAGE8D,UAHF,gBAGEA,UAHF;AAAA,OAIEC,aAJF,gBAIEA,aAJF;AAAA,OAQSjE,UART,GAQwB,MAAKH,KAR7B,CAQSG,UART;;;AAUC,UAAO,IAAIkE,OAAJ,CAAY,UAACC,OAAD,EACnB;AACC;AACA,QAAIH,UAAJ,EACA;AACC,SAAI,MAAKM,wBAAL,CAA8BH,OAA9B,CAAJ,EAA4C;AAC3C;AACA;;AAED,WAAKhE,+BAAL,GAAuCoE,KAAKC,GAAL,EAAvC;;AAEA,SAAMpE,UAAU,MAAKA,OAAL,CAAaqE,cAAb,EAAhB;;AAEA,YAAO,MAAKjE,QAAL,CACN;AACAC,yBAAoB,IADpB;AAEAiE,8BAAyBtE;AAFzB,MADM,EAKP,YACA;AACC4D,iBAAWhE,UAAX,EAAuBoE,IAAvB,CAA4B,UAACnE,OAAD,EAC5B;AACC,aAAK0E,gBAAL,CAAsB1E,OAAtB,EAA+BG,OAA/B,EAAwC+D,OAAxC;AACA,OAHD;AAIA,MAXM,CAAP;AAYA;;AAED,QAAMS,aAAaX,cAAc,MAAK/D,KAAL,CAAWD,OAAzB,EAAkCD,UAAlC,CAAnB;AACA,UAAK2E,gBAAL,CAAsBC,UAAtB,EAAkC,IAAlC,EAAwCT,OAAxC;AACA,IA7BM,CAAP;AA8BA,G,QAEDQ,gB,GAAmB,UAAC1E,OAAD,EAAUG,OAAV,EAAmB+D,OAAnB,EACnB;AACCD,WAAQC,OAAR,CAAgBlE,OAAhB,EAAyBmE,IAAzB,CAA8B,UAACnE,OAAD,EAC9B;AACC;AACA,QAAIA,QAAQ0D,MAAR,KAAmB,CAAnB,IAAwB,MAAK9D,KAAL,CAAWI,OAAX,CAAmB0D,MAAnB,KAA8B,CAA1D,EACA;AACC,YAAO,MAAKI,mBAAL,GAA2BK,IAA3B,CAAgC;AAAA,aAAMnE,OAAN;AAAA,MAAhC,CAAP;AACA;AACD,WAAOA,OAAP;AACA,IARD,EASCmE,IATD,CASM,UAACnE,OAAD,EACN;AACC,UAAK4E,iBAAL,CAAuB5E,OAAvB,EAAgCG,OAAhC,EAAyC+D,OAAzC;AACA,IAZD,EAaCW,KAbD,CAaO,UAACC,KAAD,EACP;AACCC,YAAQD,KAAR,CAAcA,KAAd;AACA,UAAKF,iBAAL,CAAuB,EAAvB,EAA2BzE,OAA3B,EAAoC+D,OAApC;AACA,IAjBD;AAkBA,G,QAkEDP,Q,GAAW,UAACqB,QAAD,EACX;AAAA,sBAC6B,MAAK/E,KADlC;AAAA,OACSwC,KADT,gBACSA,KADT;AAAA,OACgBwC,QADhB,gBACgBA,QADhB;AAAA,OAESjF,OAFT,GAEqB,MAAKJ,KAF1B,CAESI,OAFT;;;AAIC,OAAMc,iBAAiBd,QAAQkF,MAAR,CAAe;AAAA,WAAKC,EAAE1C,KAAF,KAAYuC,QAAjB;AAAA,IAAf,EAA0C,CAA1C,CAAvB;;AAEA,SAAKzE,QAAL,CACC;AACAO,kCADA;AAEAf,gBAAae,iBAAiBA,eAAeK,KAAhC,GAAwC;AAFrD,IADD;;AAMA;AACA,OAAI6D,aAAavC,KAAjB,EAAwB;AACvBwC,aAASD,QAAT;AACA;AACD,G,QAEDI,M,GAAS,UAACvC,KAAD,EAAW;AAAA,sBACO,MAAK5C,KADZ;AAAA,OACXmF,MADW,gBACXA,MADW;AAAA,OACH3C,KADG,gBACHA,KADG;;AAEnB,OAAI2C,MAAJ,EAAY;AACX,uCAAmBA,MAAnB,EAA2BvC,KAA3B,EAAkCJ,KAAlC;AACA;AACD,SAAKZ,IAAL,IAAa,MAAKA,IAAL,CAAUuD,MAAV,CAAiBvC,KAAjB,CAAb;AACA,G,QAEDwC,O,GAAU,UAACxC,KAAD,EACV;AAAA,OACSC,QADT,GACsB,MAAK7C,KAD3B,CACS6C,QADT;;;AAGC,OAAI,CAACA,QAAL,EAAe;AACd,UAAKP,aAAL;AACA;AACD,G,QAED+C,U,GAAa,UAACzC,KAAD,EACb;AAAA,sBACyB,MAAK5C,KAD9B;AAAA,OACOmF,MADP,gBACOA,MADP;AAAA,OACe3C,KADf,gBACeA,KADf;AAAA,OAES1C,UAFT,GAEwB,MAAKH,KAF7B,CAESG,UAFT;;AAIC;AACA;;AACA,OAAIwF,OAAOC,sBAAP,KAAkC,KAAtC,EAA6C;AAC5C,UAAK1D,QAAL;AACA;;AAED,OAAI,CAAC/B,UAAL,EACA;AACC0C,YAAQxB,SAAR;AACA,UAAK0C,QAAL,CAAclB,KAAd;AACA;;AAED,OAAI2C,MAAJ,EAAY;AACX,uCAAmBA,MAAnB,EAA2BvC,KAA3B,EAAkCJ,KAAlC;AACA;AACD,G;;;AA1wBD;AACA;;;;;sCAgCA;AAAA;;AAAA,gBAC0C,KAAKxC,KAD/C;AAAA,OACSwC,KADT,UACSA,KADT;AAAA,OACgBsB,UADhB,UACgBA,UADhB;AAAA,OAC4B0B,SAD5B,UAC4BA,SAD5B;;AAGC;;AACA,OAAIC,wBAAJ;AACA,UAAOC,SAASC,cAAT,CAA2BF,EAA3B,aAAP,EAAgD;AAC/CA,gCAA0BG,sBAA1B;AACA;AACD,QAAKnF,KAAL,CAAWgF,EAAX,GAAmBA,EAAnB;AACA,QAAKnF,QAAL,CAAc,EAAEmF,MAAF,EAAd;;AAEA,OAAI,CAAC9B,aAAanB,KAAb,CAAD,IAAwB,CAACgD,SAAzB,IAAsC1B,UAA1C,EACA;AACC,UAAM,IAAI+B,KAAJ,CAAU,mJAAV,CAAN;AACA;;AAED,OAAI,CAAClC,aAAanB,KAAb,CAAD,IAAwBgD,SAA5B,EACA;AACC,SAAKlF,QAAL,CACC;AACAwF,wCAAoC;AADpC,KADD;;AAKAN,cAAUhD,KAAV,EAAiB0B,IAAjB,CAAsB,UAAC6B,MAAD,EACtB;AACC,YAAKzF,QAAL,CACC;AACAO,sBAAiBkF,MADjB;AAEAjG,kBAAaiG,SAASA,OAAO7E,KAAhB,GAAwB,EAFrC;AAGA4E,yCAAoC;AAHpC,MADD;AAMA,KARD,EASA,UAACjB,KAAD,EACA;AACCC,aAAQD,KAAR,CAAcA,KAAd;AACA,YAAKvE,QAAL,CAAc;AACbwF,yCAAoC;AADvB,MAAd;AAGA,KAfD;AAgBA;AACD;;;yCAGD;AACCE,gBAAa,KAAKC,2BAAlB;AACA;;;2BA8DD;AAAA,iBAwBG,KAAKjG,KAxBR;AAAA,OAGEkG,IAHF,WAGEA,IAHF;AAAA,OAIEC,OAJF,WAIEA,OAJF;AAAA,OAKEC,MALF,WAKEA,MALF;AAAA,OAMEC,cANF,WAMEA,cANF;AAAA,OAOEC,cAPF,WAOEA,cAPF;AAAA,OAQEC,SARF,WAQEA,SARF;AAAA,OASEC,WATF,WASEA,WATF;AAAA,OAUEzD,oBAVF,WAUEA,oBAVF;AAAA,OAWE0D,eAXF,WAWEA,eAXF;AAAA,OAYE3D,QAZF,WAYEA,QAZF;AAAA,OAaE5B,KAbF,WAaEA,KAbF;AAAA,OAcEwF,WAdF,WAcEA,WAdF;AAAA,OAeElE,KAfF,WAeEA,KAfF;AAAA,OAgBEwC,QAhBF,WAgBEA,QAhBF;AAAA,OAiBE2B,eAjBF,WAiBEA,eAjBF;AAAA,OAkBE9B,KAlBF,WAkBEA,KAlBF;AAAA,OAmBE+B,eAnBF,WAmBEA,eAnBF;AAAA,OAoBEC,UApBF,WAoBEA,UApBF;AAAA,OAqBEC,KArBF,WAqBEA,KArBF;AAAA,OAsBEC,SAtBF,WAsBEA,SAtBF;AAAA,gBAmCG,KAAKpH,KAnCR;AAAA,OA4BE8F,EA5BF,UA4BEA,EA5BF;AAAA,OA6BE1F,OA7BF,UA6BEA,OA7BF;AAAA,OA8BEQ,iBA9BF,UA8BEA,iBA9BF;AAAA,OA+BEuF,iCA/BF,UA+BEA,iCA/BF;AAAA,OAgCEhF,UAhCF,UAgCEA,UAhCF;AAAA,OAiCEhB,UAjCF,UAiCEA,UAjCF;;;AAqCC,OAAMkH,iBAAiB,EAAEC,WAAWV;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAVuB,IAAvB,CAYA,OACC;AAAA;AAAA;AACC,SAAId,EADL;AAEC,YAAOZ,KAFR;AAGC,sBAAiB8B,eAHlB;AAIC,YAAOG,qBAAaE,cAAb,EAAgCF,KAAhC,IAA0CE,cAJlD;AAKC,gBAAW,0BAAWD,SAAX,EAAsB,oBAAtB,EAA4C;AACtD,sCAAiCjG,UADqB;AAEtD,qCAAiCqF,WAAYD,SAAS;AAFA,MAA5C,CALZ;AAUC;AAAA;AAAA;AACC,WAAM,KAAK/D,uBADZ;AAEC,iBAAU,aAFX;AAIG,MAAC5B,qBAAqBuF,iCAAtB,KAA4D,uDAJ/D;AAOG,UAAKoB,eAAL,EAPH;AAYGhG,cACD;AAAA;AAAA;AACC,0BADD;AAEC,gBAAUuE,KAAQA,EAAR,eAAsBzE,SAFjC;AAGC,cAAQwB,KAHT;AAIC,iBAAWM,QAJZ;AAKC,gBAAU6D,mBAAmB9B,KAL9B;AAMG3D;AANH,MAbF;AAwBC;AAAA;AAAA;AACC,YAAK,KAAKa,YADX;AAEC,WAAI0D,KAAQA,EAAR,cAAqBzE,SAF1B;AAGC,cAAOjB,OAHR;AAIC,cAAOA,QAAQ0D,MAAR,KAAmB,CAAnB,GAAuBzC,SAAvB,GAAmCwB,KAJ3C;AAKC,2BAAoBO,wBAAwBjD,WAAWqH,IAAX,OAAsB,EALnE;AAMC,kBAAWZ,SANZ;AAOC,uBAAgBD,cAPjB;AAQC,gBAAS,KAAKnC,cARf;AASC,6BAAsB,KAAK/D,oBAT5B;AAUC,oBAAa,KAAKiB,WAVnB;AAWC,uBAAgB+E,WAAW,KAAX,GAAmB,CAAnB,GAAuBC,cAXxC;AAYC,oBAAa,KAZd;AAaC,iBAAU,KAAK3C,QAbhB;AAcC,mBAAY,KAAKhD,UAdlB;AAeC,iBAAU,KAAKU,QAfhB;AAgBC,sBAAe,KAhBhB;AAiBC,8BAAuB,KAjBxB;AAkBC,iBAAU,KAlBX;AAmBC,uBAAgB,KAAKiB,YAnBtB;AAoBC,mBAAY,KAAKgD,UApBlB;AAqBC,wBAAiBuB,eArBlB;AAsBC,mBAAYC,UAtBb;AAuBC,qBAAY,KAAK7G,KAAL,CAAW,YAAX,KAA4BkB,KAvBzC;AAwBC,kBAAW,0BAAW,cAAX,EAA2B,oBAA3B,EACX;AACC,4CAAsCqF,cAAc,MADrD;AAEC,6CAAsCA,cAAc;AAFrD,QADW,CAxBZ;AA8BE,WAAKa,sBAAL,GAA8BC,GAA9B,CAAkC,UAACtB,MAAD,EAASzE,CAAT;AAAA,cAClC;AAAA,uBAAM,IAAN;AAAA;AACC,cAAKA,CADN;AAEC,aAAImE,KAAQA,EAAR,oBAAyBnE,CAAzB,GAA+BN,SAFpC;AAGC,gBAAO+E,OAAOvD,KAHf;AAIC,eAAMiE,kBAAkBV,MAAlB,GAA2B/E,SAJlC;AAKC,oBAAWyF,eALZ;AAMC,eAAMD,cAAcxF,SAAd,GAA0B+E,OAAOG,IANxC;AAOEO,0BAAkBzF,SAAlB,GAA+B+E,OAAOuB,OAAP,GAAiBvB,OAAOuB,OAAP,CAAevB,MAAf,CAAjB,GAA0CA,OAAO7E;AAPlF,QADkC;AAAA,OAAlC;AA9BF;AAxBD;AAVD,IADD;AAgFA;;;oCAGD;AAAA,iBAgBG,KAAKlB,KAhBR;AAAA,OAGEwC,KAHF,WAGEA,KAHF;AAAA,OAIEtB,KAJF,WAIEA,KAJF;AAAA,OAKEgF,IALF,WAKEA,IALF;AAAA,OAMEQ,WANF,WAMEA,WANF;AAAA,OAOE7D,QAPF,WAOEA,QAPF;AAAA,OAQEC,QARF,WAQEA,QARF;AAAA,OASE6D,eATF,WASEA,eATF;AAAA,OAUE9B,KAVF,WAUEA,KAVF;AAAA,OAWE0C,QAXF,WAWEA,QAXF;AAAA,OAYEC,SAZF,WAYEA,SAZF;AAAA,OAaEC,YAbF,WAaEA,YAbF;AAAA,OAcEC,cAdF,WAcEA,cAdF;AAAA,iBA2BG,KAAK/H,KA3BR;AAAA,OAoBE8F,EApBF,WAoBEA,EApBF;AAAA,OAqBE3E,UArBF,WAqBEA,UArBF;AAAA,OAsBEhB,UAtBF,WAsBEA,UAtBF;AAAA,OAuBEiB,OAvBF,WAuBEA,OAvBF;AAAA,OAwBE+E,iCAxBF,WAwBEA,iCAxBF;AAAA,OAyBEtE,kBAzBF,WAyBEA,kBAzBF;;AA6BC;AACA;AACA;;AAEA;AACA;AACA;;AAEA,OAAMmG,OAAO,OAAOzB,IAAP,KAAgB,SAAhB,GAA4BlF,SAA5B,GAAwCkF,IAArD;;AAEA,UACC;AAAA,oBAAO,QAAP;AAAA;AACEyB,YACA,8BAAC,IAAD,IAAM,WAAU,yBAAhB,GAFF;AAIC;AACC,SAAKlC,KAAQA,EAAR,eAAsBzE,SAD5B;AAEC,UAAM,KAAKiB,UAFZ;AAGC,YAAQnC,UAHT;AAIC,YAAQoB,KAJT;AAKC,kBAAcwF,WALf;AAMC,eAAW,KAAKnE,kBANjB;AAOC,gBAAY,KAAKI,SAPlB;AAQC,aAAS,KAAKwC,MARf;AASC,WAAK,UATN;AAUC,0BAAkB,MAVnB;AAWC,sBAAgBrE,aAAa,IAAb,GAAoB,KAXrC;AAYC,sBAAgB,IAZjB;AAaC,kBAAY2E,MAAM3E,UAAN,GAAsB2E,EAAtB,cAAmCzE,SAbhD;AAcC,8BAAwByE,MAAOjE,uBAAuBR,SAA9B,GAA8CyE,EAA9C,oBAA+DjE,kBAA/D,GAAsFR,SAd/G;AAeC,eAAW8B,QAfZ;AAgBC,eAAWyE,QAhBZ;AAiBC,gBAAYC,SAjBb;AAkBC,mBAAeC,YAlBhB;AAmBC,eAAW3B,qCAAqCjD,QAnBjD;AAoBC,sBAAkB8D,mBAAoB5F,YAAY,KApBnD;AAqBC,YAAQ8D,UAAU9D,YAAY,KAAZ,GAAoB,UAApB,GAAiCC,SAA3C,CArBT;AAsBC,gBAAY,0BAAW,2BAAX,EAAwC0G,cAAxC,EAAwD;AACnE,sCAAgCC;AADmC,MAAxD,CAtBb;AAJD,IADD;AAgCA;;;2CAGD;AAAA,OACSC,UADT,GACwB,KAAK5H,KAD7B,CACS4H,UADT;AAAA,OAES7H,OAFT,GAEqB,KAAKJ,KAF1B,CAESI,OAFT;;;AAIC,OAAI6H,aAAa,CAAb,IAAkB7H,QAAQ0D,MAAR,GAAiBmE,UAAvC,EAAmD;AAClD,WAAO7H,QAAQ8H,KAAR,CAAc,CAAd,EAAiBD,UAAjB,CAAP;AACA;;AAED,UAAO7H,OAAP;AACA;;;2CA6LwBkE,O,EACzB;AAAA;;AAAA,iBAMG,KAAKjE,KANR;AAAA,OAGE8H,QAHF,WAGEA,QAHF;AAAA,OAIEC,8BAJF,WAIEA,8BAJF;AAAA,OAQSjI,UART,GAQwB,KAAKH,KAR7B,CAQSG,UART;;;AAUC,OAAMkI,OAAOF,YAAYzD,KAAKC,GAAL,KAAa,KAAKrE,+BAA9B,CAAb;;AAEA,OAAIH,WAAW2D,MAAX,IAAqBsE,8BAArB,IAAuDC,OAAO,CAAlE,EACA;AACC,QAAI,CAAC,KAAK/B,2BAAV,EACA;AACC,UAAKA,2BAAL,GAAmCgC,WAAW,YAC9C;AACC,aAAKhC,2BAAL,GAAmCjF,SAAnC;AACA,aAAKkH,sBAAL;AACA,MAJkC,EAKnCF,IALmC,CAAnC;AAMA;;AAED,SAAKE,sBAAL,GAA8B;AAAA,YAAM,OAAK/D,cAAL,GAAsBD,IAAtB,CAA2BD,OAA3B,CAAN;AAAA,KAA9B;AACA,WAAO,IAAP;AACA;AACD;;;oCAsFiBlE,O,EAASG,O,EAASiI,Q,EACpC;AAAA,iBAIK,KAAKnI,KAJV;AAAA,OAEE8D,UAFF,WAEEA,UAFF;AAAA,OAGEf,oBAHF,WAGEA,oBAHF;AAAA,iBAWK,KAAKpD,KAXV;AAAA,OAOEmB,UAPF,WAOEA,UAPF;AAAA,OAQEjB,cARF,WAQEA,cARF;AAAA,OASED,cATF,WASEA,cATF;AAAA,OAUE4E,sBAVF,WAUEA,sBAVF;;;AAaC,OAAM4D,WAAW,EAAjB;;AAEA,OAAItE,UAAJ,EACA;AACC;AACA,QAAIuE,eAAenI,OAAf,EAAwBL,cAAxB,CAAJ,EACA;AACCuI,cAASrH,OAAT,GAAmBhB,QAAQ0D,MAAR,GAAiB,CAApC;AACA2E,cAASvI,cAAT,GAA0BK,OAA1B;AACA;;AAED;AACA;AACA;AACA,QAAImI,eAAenI,OAAf,EAAwBN,cAAxB,CAAJ,EACA;AACC;AACA,SAAIG,QAAQ0D,MAAR,GAAiB,CAArB,EACA;AACC2E,eAASrI,OAAT,GAAmBA,OAAnB;AACAqI,eAASxI,cAAT,GAA0BM,OAA1B;AACA;AACD;;AAED,QAAIA,YAAYsE,sBAAhB,EACA;AACC4D,cAAS7H,iBAAT,GAA6B,KAA7B;AACA6H,cAAS5D,sBAAT,GAAkCxD,SAAlC;AACA;AACD,IA3BD,MA6BA;AACCoH,aAASrH,OAAT,GAAmBhB,QAAQ0D,MAAR,GAAiB,CAApC;;AAEA;AACA,QAAI1D,QAAQ0D,MAAR,GAAiB,CAArB,EACA;AACC2E,cAASrI,OAAT,GAAmBA,OAAnB;AACA;AACD;;AAED,OAAIqI,SAASrH,OAAT,KAAqB,KAArB,IAA8B,CAACgC,oBAAnC,EAAyD;AACxD,QAAIjC,UAAJ,EAAgB;AACf,UAAKc,IAAL,CAAU2B,UAAV;AACA;AACD;;AAED,QAAKjD,QAAL,CAAc8H,QAAd,EAAwBD,QAAxB;AACA;;;;;AA5sBD;kDACoDxI,K,EACpD;AAAA,OADkC6C,KAClC,SADkCA,KAClC;AAAA,OADyCzC,OACzC,SADyCA,OACzC;;AACC,OAAMqI,WACN;AACC;AACApI,WACA;AACCwC;AADD;;AAKD;AACA;AATA,IADA,CAWA,IAAI8F,MAAMC,OAAN,CAAcxI,OAAd,CAAJ,EACA;AACC;AACA;AACA,QAAIyC,UAAU7C,MAAMK,KAAN,CAAYwC,KAA1B,EACA;AACC4F,cAASvH,cAAT,GAA0Bd,QAAQkF,MAAR,CAAe;AAAA,aAAKC,EAAE1C,KAAF,KAAYA,KAAjB;AAAA,MAAf,EAAuC,CAAvC,CAA1B;AACA4F,cAAStI,UAAT,GAAsBsI,SAASvH,cAAT,GAA0BuH,SAASvH,cAAT,CAAwBK,KAAlD,GAA0D,EAAhF;AACA;AACD;;AAED,UAAOkH,QAAP;AACA;;;;EA5PwC7I,a,WAElCiJ,S,GACP;AACC;AACAzI,UAAU,oBAAU0I,OAAV,CAET,oBAAUC,KAAV,CACC;AACA;AACAlG,SAAQ,oBAAUmG,GAFlB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAzH,SAAQ,oBAAU0H,MAblB;AAcA;AACA1C,QAAQ,oBAAU2C,SAAV,CACP,CACA,oBAAU3G,IADV,EAEA,oBAAU4G,IAFV,CADO,CAfR;AAoBA;AACA;AACAxB,WAAU,oBAAUwB;AAtBpB,EADD,CAFS,CAFX;;AA+BC;AACA;AACA;AACA;AACA;AACAhF,aAAa,oBAAUgF,IApCxB;;AAsCC;AACA;AACA/E,gBAAgB,oBAAU+E,IAAV,CAAeC,UAxChC;;AA0CC;AACA;AACA;AACAnB,aAAa,oBAAUoB,MA7CxB;;AA+CC;AACAlB,WAAW,oBAAUkB,MAAV,CAAiBD,UAhD7B;;AAkDC;AACAhB,iCAAiC,oBAAUiB,MAAV,CAAiBD,UAnDnD;;AAqDC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtC,kBAAkB,oBAAUwC,WAhE7B;;AAkEC;AACAC,OAAa,oBAAUN,MAnExB;;AAqEC;AACA1H,QAAa,oBAAU0H,MAtExB;;AAwEC;AACAlC,cAAc,oBAAUkC,MAzEzB;;AA2EC;AACA;AACApC,cAAc,oBAAU2C,IA7EzB;;AA+EC;AACAtG,WAAa,oBAAUsG,IAhFxB;;AAkFC;AACArG,WAAa,oBAAUqG,IAAV,CAAeJ,UAnF7B;;AAqFC;AACAlE,QAAQ,oBAAUgE,SAAV,CAAoB,CAC3B,oBAAUD,MADiB,EAE3B,oBAAUO,IAFiB,CAApB,CAtFT;;AA2FC;AACA3G,QAAa,oBAAUmG,GA5FxB;;AA8FC;AACA3D,WAAa,oBAAU8D,IA/FxB;;AAiGC;AACA;AACA;AACA;AACA3D,SAAa,oBAAU2D,IArGxB;;AAuGC;AACA;AACA;AACA1C,SAAa,oBAAU+C,IAAV,CAAeJ,UA1G7B;;AA4GC;AACAhC,YAAa,oBAAU6B,MA7GxB;;AA+GC;AACAlB,iBAAiB,oBAAUkB,MAhH5B;;AAkHC;AACA9B,QAAa,oBAAUsC,MAnHxB;;AAqHC;AACA;AACA;AACA;AACA;AACA;AACA;AACAlD,OAAM,oBAAU2C,SAAV,CAAoB,CACzB,oBAAUI,WADe,EAEzB,oBAAUE,IAFe,CAApB,CA5HP;;AAiIC;AACA;AACA;AACA;AACA;AACAhD,UAAa,oBAAUgD,IAtIxB;;AAwIC;AACA5B,WAAa,oBAAUyB,MAzIxB;;AA2IC;AACAxB,YAAa,oBAAU2B,IA5IxB;;AA8IC;AACA;AACA;AACA1B,eAAe,oBAAUmB,MAjJ1B;;AAmJC;AACA;AACA;AACA;AACA/H,iBAAiB,oBAAUuI,MAvJ5B;;AAyJC;AACA;AACA;AACA;AACA;AACA;AACA;AACArG,uBAAuB,oBAAUoG,IAAV,CAAeJ;AAhKvC,C,UAmKOM,Y,GACP;AACC;AACAvG,WAAW,KAFZ;;AAIC;AACA6D,kBAAkB,IALnB;;AAOC;AACA2C,UAAU,KARX;;AAUC;AACAlD,SAAS,IAXV;;AAaCG,YAAY,MAbb;;AAeC;AACAuB,WAAW,GAhBZ;;AAkBC;AACAC,iCAAiC,CAnBlC;;AAqBC;AACAhE,6BAtBD;;AAwBC;AACA;AACA;AACA;AACA;AACA6D,aAAa,GA7Bd;;AA+BC;AACA;AACA7E,uBAAuB;AAjCxB,C;;kBAvKoBrD,Y;;;AA2+BrB,SAASiE,YAAT,CAAsBnB,KAAtB,EACA;AACC,QAAOA,UAAU,IAAV,IAAkBA,UAAUxB,SAAnC;AACA;;AAED;AACA,SAAS+C,aAAT,CAAuBhE,OAAvB,EAAgCyC,KAAhC,EACA;AACC;AACA,KAAI,CAACA,KAAL,EAAY;AACX,SAAOzC,OAAP;AACA;;AAEDyC,SAAQA,MAAM+G,WAAN,EAAR;;AAEA,QAAOxJ,QAAQkF,MAAR,CAAe;AAAA,MAAG/D,KAAH,SAAGA,KAAH;AAAA,SAAeA,MAAMqI,WAAN,GAAoBC,OAApB,CAA4BhH,KAA5B,KAAsC,CAArD;AAAA,EAAf,CAAP;AACA;;IAEKrC,O;;;;OAELD,O,GAAU,C;;;;;mCAGV;AACC,OAAI,KAAKA,OAAL,GAAeuJ,gBAAnB,EAAqC;AACpC,SAAKvJ,OAAL;AACA,IAFD,MAEO;AACN,SAAKA,OAAL,GAAe,CAAf;AACA;AACD,UAAO,KAAKA,OAAZ;AACA;;;;;;AAGF;;;AACA,IAAMuJ,mBAAmBC,OAAOD,gBAAP,IAA4BE,KAAKC,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,CAAvE;;AAEA;AACA;AACA,SAASvB,cAAT,CAAwBnI,OAAxB,EAAiC2J,mBAAjC,EACA;AACC,KAAMC,OAAO5J,UAAU2J,mBAAvB;;AAEA;AACA;AACA;AACA,QAAOC,OAAO,CAAP,IAAaA,OAAO,CAAP,IAAYH,KAAKI,GAAL,CAASD,IAAT,IAAiBL,mBAAmB,CAApE;AACA;;AAED,SAAS7D,oBAAT,GAAgC;AAC/B,QAAO+D,KAAKK,MAAL,GAAcC,QAAd,GAAyBC,OAAzB,CAAiC,KAAjC,EAAyC,EAAzC,CAAP;AACA","file":"Autocomplete.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { polyfill as reactLifecyclesCompat } from 'react-lifecycles-compat'\r\nimport classNames from 'classnames'\r\n\r\nimport ExpandableList from './ExpandableList'\r\nimport List from './List'\r\nimport Label from './TextInputLabel'\r\nimport TextInput from './TextInputInput'\r\nimport Ellipsis from './Ellipsis'\r\nimport WithError from './WithError'\r\n\r\nimport { onBlurForReduxForm } from './utility/redux-form'\r\nimport { submitFormOnCtrlEnter } from './utility/dom'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\nconst empty_value_option_value = ''\r\n\r\n@reactLifecyclesCompat\r\nexport default class Autocomplete extends PureComponent\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// A list of selectable options\r\n\t\toptions : PropTypes.arrayOf\r\n\t\t(\r\n\t\t\tPropTypes.shape\r\n\t\t\t({\r\n\t\t\t\t// Option value (may be `undefined`)\r\n\t\t\t\tvalue : PropTypes.any,\r\n\t\t\t\t// Could restrict it to stringifiable types\r\n\t\t\t\t// but I guess this is not required\r\n\t\t\t\t// and one could even use `object`s as `value`s.\r\n\t\t\t\t// // Option value (may be `undefined`)\r\n\t\t\t\t// value : PropTypes.oneOfType([\r\n\t\t\t\t// \tPropTypes.string,\r\n\t\t\t\t// \tPropTypes.number,\r\n\t\t\t\t// \tPropTypes.bool\r\n\t\t\t\t// ]),\r\n\t\t\t\t// Option label (may be `undefined`)\r\n\t\t\t\tlabel : PropTypes.string,\r\n\t\t\t\t// Option icon\r\n\t\t\t\ticon  : PropTypes.oneOfType\r\n\t\t\t\t([\r\n\t\t\t\t\tPropTypes.node,\r\n\t\t\t\t\tPropTypes.func\r\n\t\t\t\t]),\r\n\t\t\t\t// Render custom content (a React component).\r\n\t\t\t\t// Receives `{ value, label }` properties.\r\n\t\t\t\tcontent : PropTypes.func\r\n\t\t\t})\r\n\t\t),\r\n\r\n\t\t// An alternative way of getting `options`.\r\n\t\t// If it's an `autocomplete` then this function\r\n\t\t// receives the `query : string` argument.\r\n\t\t// Is only for `autocomplete` mode.\r\n\t\t// Must return a `Promise`.\r\n\t\tgetOptions : PropTypes.func,\r\n\r\n\t\t// Can be supplied when supplying `options` prop.\r\n\t\t// By default filters by substring inclusion (case-insensitive).\r\n\t\tfilterOptions : PropTypes.func.isRequired,\r\n\r\n\t\t// The maximum number of options to be rendered\r\n\t\t// in the options list when it's expanded.\r\n\t\t// `0` means \"unlimited\".\r\n\t\tmaxOptions : PropTypes.number,\r\n\r\n\t\t// Throttle `async getOptions()` invocations.\r\n\t\tthrottle : PropTypes.number.isRequired,\r\n\r\n\t\t// Throttle `async getOptions()` invocations.\r\n\t\tminCharactersToStartThrottling : PropTypes.number.isRequired,\r\n\r\n\t\t// Option component.\r\n\t\t// (when `<Autocomplete/>` is expanded).\r\n\t\t// Receives properties:\r\n\t\t// * `{ ...option }` — All properties of an `option` such as `value`, `label`, etc. Each `option` must have a `value` and a `label` (`value` may be `undefined`).\r\n\t\t// * `selected: boolean` — If this option is selected.\r\n\t\t// * `focused: boolean` — If this option is focused.\r\n\t\t// * `disabled: boolean` — If this option is disabled. Seems to be not used for now.\r\n\t\t// Can only contain \"inline\" elements like `<span/>`,\r\n\t\t// not `<div/>`s, `<section/`>s, `<h1/>`s or `<p/>`s,\r\n\t\t// because `<button/>`s can't contain \"block\" elements.\r\n\t\t// `display: block` can still be set on `<span/>`s and other \"inline\" elements.\r\n\t\toptionComponent : PropTypes.elementType,\r\n\r\n\t\t// HTML form input `name` attribute\r\n\t\tname       : PropTypes.string,\r\n\r\n\t\t// Label which is placed above the select\r\n\t\tlabel      : PropTypes.string,\r\n\r\n\t\t// Placeholder (like \"Choose\")\r\n\t\tplaceholder : PropTypes.string,\r\n\r\n\t\t// Show icon only for selected item,\r\n\t\t// and only if `icon` is `true`.\r\n\t\tsaveOnIcons : PropTypes.bool,\r\n\r\n\t\t// Disables this control\r\n\t\tdisabled   : PropTypes.bool,\r\n\r\n\t\t// Set to `true` to mark the field as required\r\n\t\trequired   : PropTypes.bool.isRequired,\r\n\r\n\t\t// Indicates that the input is invalid.\r\n\t\terror : PropTypes.oneOfType([\r\n\t\t\tPropTypes.string,\r\n\t\t\tPropTypes.bool\r\n\t\t]),\r\n\r\n\t\t// Selected option value\r\n\t\tvalue      : PropTypes.any,\r\n\r\n\t\t// Is called when an option is selected\r\n\t\tonChange   : PropTypes.func,\r\n\r\n\t\t// Is called when the select is blurred.\r\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\r\n\t\t// so that it gets the parsed `value` in its `onBlur` handler,\r\n\t\t// not the formatted text.\r\n\t\tonBlur     : PropTypes.func,\r\n\r\n\t\t// If `scroll` is `false`, then options list\r\n\t\t// is not limited in height.\r\n\t\t// Is `true` by default (scrollable).\r\n\t\tscroll     : PropTypes.bool.isRequired,\r\n\r\n\t\t// Component CSS class\r\n\t\tclassName  : PropTypes.string,\r\n\r\n\t\t// Autocomplete `<input/>` CSS class\r\n\t\tinputClassName : PropTypes.string,\r\n\r\n\t\t// CSS style object\r\n\t\tstyle      : PropTypes.object,\r\n\r\n\t\t// If the `icon` flag is set to `true`,\r\n\t\t// and `icon` is specified for a selected option,\r\n\t\t// then the selected option will be displayed\r\n\t\t// as icon only, without the label\r\n\t\t// (was used in early versions of `react-phone-number-input`).\r\n\t\t// Otherwise, if it's a React component\r\n\t\t// then it's passed to `<TextInput/>` as its `icon`.\r\n\t\ticon: PropTypes.oneOfType([\r\n\t\t\tPropTypes.elementType,\r\n\t\t\tPropTypes.bool\r\n\t\t]),\r\n\r\n\t\t// If this flag is set to `true`,\r\n\t\t// then it makes `<Autocomplete/>` not stretch itself\r\n\t\t// to 100% width by making it `inline-block`.\r\n\t\t// Is set to `true` when `icon` is `true`\r\n\t\t// because it makes sense.\r\n\t\tcompact    : PropTypes.bool,\r\n\r\n\t\t// HTML `tabindex` attribute\r\n\t\ttabIndex   : PropTypes.number,\r\n\r\n\t\t// HTML `autoFocus` attribute\r\n\t\tautoFocus  : PropTypes.bool,\r\n\r\n\t\t// HTML `autocomplete` attribute.\r\n\t\t// Set to \"off\" to disable any autocompletion in a web browser.\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\r\n\t\tautoComplete : PropTypes.string,\r\n\r\n\t\t// `<Autocomplete/>` loads `async getOptions()` after it has been mounted.\r\n\t\t// Until then `<Autocomplete/>` doesn't display any selected option.\r\n\t\t// One may supply an already pre-loaded currently selected option\r\n\t\t// to display the currently selected option sooner (e.g. Server-Side Rendering).\r\n\t\tselectedOption : PropTypes.object,\r\n\r\n\t\t// WAI-ARIA requires any option be focused only on-demand\r\n\t\t// when the user explicitly presses the Down arrow key.\r\n\t\t// https://www.w3.org/TR/wai-aria-practices/examples/combobox/aria1.0pattern/combobox-autocomplete-list.html\r\n\t\t// Still, it's not be the best user experience for non-disabled users:\r\n\t\t// it would be more convenient for them if the first option was automatically focused.\r\n\t\t// Hence this property.\r\n\t\t// (is `false` by default for WAI-ARIA compliancy)\r\n\t\thighlightFirstOption : PropTypes.bool.isRequired\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\t// Set to `true` to mark the field as required\r\n\t\trequired : false,\r\n\r\n\t\t// Show `error` (if passed).\r\n\t\tindicateInvalid : true,\r\n\r\n\t\t// Set to `true` to display the loading indicator\r\n\t\tloading : false,\r\n\r\n\t\t// Will show scrollbar on overflow.\r\n\t\tscroll : true,\r\n\r\n\t\talignment : 'left',\r\n\r\n\t\t// `async getOptions()` throttle period.\r\n\t\tthrottle : 200,\r\n\r\n\t\t// `async getOptions()` throttle threshold (in characters).\r\n\t\tminCharactersToStartThrottling : 4,\r\n\r\n\t\t// Filters options by substring inclusion (case-insensitive).\r\n\t\tfilterOptions,\r\n\r\n\t\t// The maximum number of options to be rendered\r\n\t\t// in the options list when it's expanded.\r\n\t\t// The rationale is that otherwise the UI could\r\n\t\t// stagger when initially expanding a huge list.\r\n\t\t// `0` means \"unlimited\".\r\n\t\tmaxOptions : 500,\r\n\r\n\t\t// UX for non-disabled users is better this way.\r\n\t\t// Disabled users still can use this component.\r\n\t\thighlightFirstOption : true\r\n\t}\r\n\r\n\tstate =\r\n\t{\r\n\t\t// The sequential counter for `async getOptions()`:\r\n\t\t// the `options` with the highest counter are shown\r\n\t\t// to prevent \"race condition\" inconsistency.\r\n\t\t// Older options can only be overwritten with newer ones.\r\n\t\toptionsCounter : 0,\r\n\t\tmatchesCounter : 0,\r\n\r\n\t\tinputValue : '',\r\n\t\toptions: [],\r\n\r\n\t\t// `prevProps` for `getDerivedStateFromProps()`.\r\n\t\tprops: {}\r\n\t}\r\n\r\n\t// Latest `async getOptions()` invocation timestamp (for throttling).\r\n\tlatestFetchOptionsCallTimestamp = 0\r\n\r\n\t// Older options can only be overwritten with newer ones.\r\n\t// (in case of `async getOptions()`).\r\n\tcounter = new Counter()\r\n\r\n\t// Handles changing `value` externally for an `<Autocomplete/>`.\r\n\tstatic getDerivedStateFromProps({ value, options }, state)\r\n\t{\r\n\t\tconst newState =\r\n\t\t{\r\n\t\t\t// `prevProps`.\r\n\t\t\tprops:\r\n\t\t\t{\r\n\t\t\t\tvalue\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Changing `value` externally for an `<Autocomplete/>`\r\n\t\t// with `async getOptions()` is not supported.\r\n\t\tif (Array.isArray(options))\r\n\t\t{\r\n\t\t\t// `<Autocomplete/>`'s selected option label\r\n\t\t\t// is stored in a special `selectedOption.label` variable in `state`.\r\n\t\t\tif (value !== state.props.value)\r\n\t\t\t{\r\n\t\t\t\tnewState.selectedOption = options.filter(_ => _.value === value)[0]\r\n\t\t\t\tnewState.inputValue = newState.selectedOption ? newState.selectedOption.label : ''\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn newState\r\n\t}\r\n\r\n\tcomponentDidMount()\r\n\t{\r\n\t\tconst { value, getOptions, getOption } = this.props\r\n\r\n\t\t// Generate unique ID.\r\n\t\tlet id = `rrui-autocomplete`\r\n\t\twhile (document.getElementById(`${id}__input`)) {\r\n\t\t\tid = `rrui-autocomplete-${generateRandomString()}`\r\n\t\t}\r\n\t\tthis.input.id = `${id}__input`\r\n\t\tthis.setState({ id })\r\n\r\n\t\tif (!isEmptyValue(value) && !getOption && getOptions)\r\n\t\t{\r\n\t\t\tthrow new Error(\"An initial `value` was passed to `<Autocomplete/>` which has `getOptions` but doesn't have `getOption` to get the label for that initial `value`.\")\r\n\t\t}\r\n\r\n\t\tif (!isEmptyValue(value) && getOption)\r\n\t\t{\r\n\t\t\tthis.setState\r\n\t\t\t({\r\n\t\t\t\tisFetchingInitiallySelectedOption : true\r\n\t\t\t})\r\n\r\n\t\t\tgetOption(value).then((option) =>\r\n\t\t\t{\r\n\t\t\t\tthis.setState\r\n\t\t\t\t({\r\n\t\t\t\t\tselectedOption : option,\r\n\t\t\t\t\tinputValue : option ? option.label : '',\r\n\t\t\t\t\tisFetchingInitiallySelectedOption : false\r\n\t\t\t\t})\r\n\t\t\t},\r\n\t\t\t(error) =>\r\n\t\t\t{\r\n\t\t\t\tconsole.error(error)\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tisFetchingInitiallySelectedOption : false\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillUnmount()\r\n\t{\r\n\t\tclearTimeout(this.nextFetchOptionsCallTimeout)\r\n\t}\r\n\r\n\tonPreloadStateChange = (isPreloading) => this.setState({ isFetchingOptions : isPreloading })\r\n\r\n\tfocus = () => this.input.focus()\r\n\r\n\tonCollapse = ({ collapsedDueToItemBeingSelected, focusOut }) =>\r\n\t{\r\n\t\tconst { options, selectedOption } = this.state\r\n\r\n\t\tthis.setState\r\n\t\t({\r\n\t\t\tisExpanded : false,\r\n\t\t\tmatches : undefined\r\n\t\t})\r\n\r\n\t\tif (!collapsedDueToItemBeingSelected && !this.collapsedDueToEmptyValueOnEnter)\r\n\t\t{\r\n\t\t\tthis.setState\r\n\t\t\t({\r\n\t\t\t\tinputValue : selectedOption ? selectedOption.label : ''\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (!focusOut)\r\n\t\t{\r\n\t\t\tthis.dontExpandOnFocus = true\r\n\t\t\tthis.focus()\r\n\t\t\tthis.dontExpandOnFocus = false\r\n\t\t}\r\n\t}\r\n\r\n\tonExpand = (options = {}) =>\r\n\t{\r\n\t\tthis.setState({ isExpanded: true })\r\n\t}\r\n\r\n\tonFocusItem = (i, options) => {\r\n\t\tif (options.interaction) {\r\n\t\t\tthis.setState({ focusedOptionIndex: i })\r\n\t\t} else {\r\n\t\t\tthis.setState({ focusedOptionIndex: undefined })\r\n\t\t}\r\n\t}\r\n\r\n\texpand = () =>\r\n\t{\r\n\t\t// Reset the \"matches\" state before expanding.\r\n\t\tthis.setState({ matches: true }, this._expand)\r\n\t}\r\n\r\n\t_expand  = (parameters) => this.list.expand(parameters)\r\n\tcollapse = () => this.list.collapse()\r\n\ttoggle   = () => this.list.toggle()\r\n\r\n\tstoreListRef = (ref) => this.list = ref\r\n\tstoreInput = (node) => this.input = node\r\n\tstoreInputComponentNode = (node) => this.inputComponentNode = node\r\n\r\n\tgetInputNode = () => this.input\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\ticon,\r\n\t\t\tcompact,\r\n\t\t\tscroll,\r\n\t\t\tscrollMaxItems,\r\n\t\t\tscrollIntoView,\r\n\t\t\talignment,\r\n\t\t\tsaveOnIcons,\r\n\t\t\thighlightFirstOption,\r\n\t\t\toptionComponent,\r\n\t\t\trequired,\r\n\t\t\tlabel,\r\n\t\t\tplaceholder,\r\n\t\t\tvalue,\r\n\t\t\tonChange,\r\n\t\t\tindicateInvalid,\r\n\t\t\terror,\r\n\t\t\tcloseButtonIcon,\r\n\t\t\tcloseLabel,\r\n\t\t\tstyle,\r\n\t\t\tclassName\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tid,\r\n\t\t\toptions,\r\n\t\t\tisFetchingOptions,\r\n\t\t\tisFetchingInitiallySelectedOption,\r\n\t\t\tisExpanded,\r\n\t\t\tinputValue\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\tconst containerStyle = { textAlign: alignment }\r\n\r\n\t\t// ARIA 1.1 (accessibility) docs:\r\n\t\t// https://www.w3.org/TR/wai-aria-practices/examples/combobox/aria1.1pattern/listbox-combo.html\r\n\t\t// (not yet supported)\r\n\t\t//\r\n\t\t// ARIA 1.0 (accessibility) docs:\r\n\t\t// https://www.w3.org/TR/wai-aria-practices/examples/combobox/aria1.0pattern/combobox-autocomplete-list.html\r\n\t\t// (is supported)\r\n\r\n\t\t// value={options.length === 0 ? undefined : (inputValue.trim() === '' ? undefined : value)}\r\n\r\n\t\treturn (\r\n\t\t\t<WithError\r\n\t\t\t\tid={id}\r\n\t\t\t\terror={error}\r\n\t\t\t\tindicateInvalid={indicateInvalid}\r\n\t\t\t\tstyle={style ? { ...containerStyle, ...style } : containerStyle}\r\n\t\t\t\tclassName={classNames(className, 'rrui__autocomplete', {\r\n\t\t\t\t\t'rrui__autocomplete--expanded' : isExpanded,\r\n\t\t\t\t\t'rrui__autocomplete--compact'  : compact || (icon === true)\r\n\t\t\t\t})}>\r\n\r\n\t\t\t\t<div\r\n\t\t\t\t\tref={ this.storeInputComponentNode }\r\n\t\t\t\t\tclassName=\"rrui__input\">\r\n\r\n\t\t\t\t\t{ (isFetchingOptions || isFetchingInitiallySelectedOption) && <Ellipsis/> }\r\n\r\n\t\t\t\t\t{/* Text input */}\r\n\t\t\t\t\t{ this.renderTextInput() }\r\n\r\n\t\t\t\t\t{/* Label */}\r\n\t\t\t\t\t{/* (this label is placed after the \"selected\" button\r\n\t\t\t\t\t     to utilize the CSS `+` selector) */}\r\n\t\t\t\t\t{ label &&\r\n\t\t\t\t\t\t<Label\r\n\t\t\t\t\t\t\taria-hidden\r\n\t\t\t\t\t\t\tinputId={ id ? `${id}__input` : undefined }\r\n\t\t\t\t\t\t\tvalue={ value }\r\n\t\t\t\t\t\t\trequired={ required }\r\n\t\t\t\t\t\t\tinvalid={ indicateInvalid && error }>\r\n\t\t\t\t\t\t\t{ label }\r\n\t\t\t\t\t\t</Label>\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t{/* The list of selectable options */}\r\n\t\t\t\t\t<ExpandableList\r\n\t\t\t\t\t\tref={this.storeListRef}\r\n\t\t\t\t\t\tid={id ? `${id}__list` : undefined}\r\n\t\t\t\t\t\titems={options}\r\n\t\t\t\t\t\tvalue={options.length === 0 ? undefined : value}\r\n\t\t\t\t\t\thighlightFirstItem={highlightFirstOption && inputValue.trim() !== ''}\r\n\t\t\t\t\t\talignment={alignment}\r\n\t\t\t\t\t\tscrollIntoView={scrollIntoView}\r\n\t\t\t\t\t\tpreload={this.refreshOptions}\r\n\t\t\t\t\t\tonPreloadStateChange={this.onPreloadStateChange}\r\n\t\t\t\t\t\tonFocusItem={this.onFocusItem}\r\n\t\t\t\t\t\tscrollMaxItems={scroll === false ? 0 : scrollMaxItems}\r\n\t\t\t\t\t\tshouldFocus={false}\r\n\t\t\t\t\t\tonChange={this.setValue}\r\n\t\t\t\t\t\tonCollapse={this.onCollapse}\r\n\t\t\t\t\t\tonExpand={this.onExpand}\r\n\t\t\t\t\t\tfocusOnExpand={false}\r\n\t\t\t\t\t\thighlightSelectedItem={false}\r\n\t\t\t\t\t\ttabbable={false}\r\n\t\t\t\t\t\tgetTogglerNode={this.getInputNode}\r\n\t\t\t\t\t\tonFocusOut={this.onFocusOut}\r\n\t\t\t\t\t\tcloseButtonIcon={closeButtonIcon}\r\n\t\t\t\t\t\tcloseLabel={closeLabel}\r\n\t\t\t\t\t\taria-label={this.props['aria-label'] || label}\r\n\t\t\t\t\t\tclassName={classNames('rrui__shadow', 'rrui__options-list',\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t'rrui__options-list--left-aligned'  : alignment === 'left',\r\n\t\t\t\t\t\t\t'rrui__options-list--right-aligned' : alignment === 'right'\r\n\t\t\t\t\t\t})}>\r\n\r\n\t\t\t\t\t\t{this.getOptionsForRendering().map((option, i) => (\r\n\t\t\t\t\t\t\t<List.Item\r\n\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\tid={id ? `${id}__list-item-${i}` : undefined}\r\n\t\t\t\t\t\t\t\tvalue={option.value}\r\n\t\t\t\t\t\t\t\titem={optionComponent ? option : undefined}\r\n\t\t\t\t\t\t\t\tcomponent={optionComponent}\r\n\t\t\t\t\t\t\t\ticon={saveOnIcons ? undefined : option.icon}>\r\n\t\t\t\t\t\t\t\t{optionComponent ? undefined : (option.content ? option.content(option) : option.label)}\r\n\t\t\t\t\t\t\t</List.Item>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</ExpandableList>\r\n\t\t\t\t</div>\r\n\t\t\t</WithError>\r\n\t\t)\r\n\t}\r\n\r\n\trenderTextInput()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tvalue,\r\n\t\t\tlabel,\r\n\t\t\ticon,\r\n\t\t\tplaceholder,\r\n\t\t\tdisabled,\r\n\t\t\trequired,\r\n\t\t\tindicateInvalid,\r\n\t\t\terror,\r\n\t\t\ttabIndex,\r\n\t\t\tautoFocus,\r\n\t\t\tautoComplete,\r\n\t\t\tinputClassName\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tid,\r\n\t\t\tisExpanded,\r\n\t\t\tinputValue,\r\n\t\t\tmatches,\r\n\t\t\tisFetchingInitiallySelectedOption,\r\n\t\t\tfocusedOptionIndex\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\t// To expand on click/focus:\r\n\t\t// onFocus={ this.expandOnFocus }\r\n\t\t// onClick={ this.onClick }\r\n\r\n\t\t// WAI-ARIA 1.0 impelmentation info (accessibility):\r\n\t\t// https://www.w3.org/TR/wai-aria-practices/#combobox\r\n\t\t// https://www.levelaccess.com/differences-aria-1-0-1-1-changes-rolecombobox/\r\n\r\n\t\tconst Icon = typeof icon === 'boolean' ? undefined : icon\r\n\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t{Icon &&\r\n\t\t\t\t\t<Icon className=\"rrui__input-field__icon\"/>\r\n\t\t\t\t}\r\n\t\t\t\t<TextInput\r\n\t\t\t\t\tid={ id ? `${id}__input` : undefined }\r\n\t\t\t\t\tref={ this.storeInput }\r\n\t\t\t\t\tvalue={ inputValue }\r\n\t\t\t\t\tlabel={ label }\r\n\t\t\t\t\tplaceholder={ placeholder }\r\n\t\t\t\t\tonChange={ this.onInputValueChange }\r\n\t\t\t\t\tonKeyDown={ this.onKeyDown }\r\n\t\t\t\t\tonBlur={ this.onBlur }\r\n\t\t\t\t\trole=\"combobox\"\r\n\t\t\t\t\taria-autocomplete=\"list\"\r\n\t\t\t\t\taria-expanded={ isExpanded ? true : false }\r\n\t\t\t\t\taria-haspopup={ true }\r\n\t\t\t\t\taria-owns={ id && isExpanded ? `${id}__list` : undefined }\r\n\t\t\t\t\taria-activedescendant={ id && (focusedOptionIndex !== undefined) ? `${id}__list-item-${focusedOptionIndex}` : undefined }\r\n\t\t\t\t\trequired={ required }\r\n\t\t\t\t\ttabIndex={ tabIndex }\r\n\t\t\t\t\tautoFocus={ autoFocus }\r\n\t\t\t\t\tautoComplete={ autoComplete }\r\n\t\t\t\t\tdisabled={ isFetchingInitiallySelectedOption || disabled }\r\n\t\t\t\t\tindicateInvalid={ indicateInvalid || (matches === false) }\r\n\t\t\t\t\terror={ error || (matches === false ? 'no-match' : undefined) }\r\n\t\t\t\t\tclassName={ classNames('rrui__autocomplete__input', inputClassName, {\r\n\t\t\t\t\t\t'rrui__input-field--with-icon': Icon\r\n\t\t\t\t\t}) }/>\r\n\t\t\t</React.Fragment>\r\n\t\t)\r\n\t}\r\n\r\n\tgetOptionsForRendering()\r\n\t{\r\n\t\tconst { maxOptions } = this.props\r\n\t\tconst { options } = this.state\r\n\r\n\t\tif (maxOptions > 0 && options.length > maxOptions) {\r\n\t\t\treturn options.slice(0, maxOptions)\r\n\t\t}\r\n\r\n\t\treturn options\r\n\t}\r\n\r\n\texpandOnFocus = () =>\r\n\t{\r\n\t\tif (this.dontExpandOnFocus) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst { isExpanded } = this.state\r\n\r\n\t\tif (!isExpanded)\r\n\t\t{\r\n\t\t\tthis.setState({ matches: true }, this.expand)\r\n\t\t}\r\n\t}\r\n\r\n\tonInputValueChange = (value) =>\r\n\t{\r\n\t\tconst { isExpanded } = this.state\r\n\r\n\t\t// Rewrite this somehow.\r\n\t\t//\r\n\t\t// When `highlightFirstOption` is `true`\r\n\t\t// this is a special case when the first option is not highlighted.\r\n\t\tif (!value && isExpanded) {\r\n\t\t\tthis.list.focusItem(undefined)\r\n\t\t}\r\n\r\n\t\tthis.setState({\r\n\t\t\tinputValue : value\r\n\t\t}, () => {\r\n\t\t\tthis._expand({ refresh: true })\r\n\t\t})\r\n\t}\r\n\r\n\tonKeyDown = (event) =>\r\n\t{\r\n\t\tconst { disabled, value, required, highlightFirstOption } = this.props\r\n\t\tconst { options, isExpanded, inputValue, focusedOptionIndex } = this.state\r\n\r\n\t\tif (disabled) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (event.defaultPrevented) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (!isExpanded) {\r\n\t\t\tif (submitFormOnCtrlEnter(event, this.input)) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tswitch (event.keyCode)\r\n\t\t{\r\n\t\t\t// \"Up\" arrow.\r\n\t\t\t// Select the previous item (if present).\r\n\t\t\tcase 38:\r\n\t\t\t\tif (isExpanded)\r\n\t\t\t\t{\r\n\t\t\t\t\t// If no item was selected then do nothing.\r\n\t\t\t\t\tif (this.list.getFocusedItemIndex() === undefined)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Don't select any list item.\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// If the first item was selected.\r\n\t\t\t\t\telse if (this.list.getFocusedItemIndex() === 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// then unselect it.\r\n\t\t\t\t\t\tif (!highlightFirstOption) {\r\n\t\t\t\t\t\t\tthis.list.clearFocus()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tevent.preventDefault()\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.list.onKeyDown(event)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn\r\n\r\n\t\t\t// \"Down\" arrow.\r\n\t\t\t// Select the next item (if present).\r\n\t\t\tcase 40:\r\n\t\t\t\tif (isExpanded) {\r\n\t\t\t\t\t// An edge case for `highlightFirstOption`\r\n\t\t\t\t\t// when there's only one option available\r\n\t\t\t\t\t// so pressing \"Down\" arrow key won't result in\r\n\t\t\t\t\t// `onFocusItem` call which won't set `focusedOptionIndex`\r\n\t\t\t\t\t// in order for screen reader to announce it.\r\n\t\t\t\t\tif (highlightFirstOption &&\r\n\t\t\t\t\t\tfocusedOptionIndex === undefined &&\r\n\t\t\t\t\t\toptions.length === 1) {\r\n\t\t\t\t\t\tthis.setState({ focusedOptionIndex: 0 })\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Navigate the list (if it was already expanded).\r\n\t\t\t\t\t\tthis.list.onKeyDown(event)\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Expand the list if it's collapsed.\r\n\t\t\t\t\tevent.preventDefault()\r\n\t\t\t\t\tthis.expand()\r\n\t\t\t\t}\r\n\t\t\t\treturn\r\n\r\n\t\t\t// \"Left\" arrow.\r\n\t\t\tcase 37:\r\n\t\t\t// \"Right\" arrow.\r\n\t\t\tcase 39:\r\n\t\t\t\t// Exit \"focus options\" mode.\r\n\t\t\t\tif (isExpanded) {\r\n\t\t\t\t\tthis.list.clearFocus()\r\n\t\t\t\t\tif (highlightFirstOption) {\r\n\t\t\t\t\t\tthis.list.focusItem(0)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn\r\n\r\n\t\t\t// \"Escape\".\r\n\t\t\t// Collapse.\r\n\t\t\tcase 27:\r\n\t\t\t\tevent.preventDefault()\r\n\t\t\t\tthis.collapse()\r\n\t\t\t\treturn\r\n\r\n\t\t\t// \"Enter\".\r\n\t\t\tcase 13:\r\n\t\t\t\tif (!inputValue)\r\n\t\t\t\t{\r\n\t\t\t\t\t// If no option is selected and the input value is empty\r\n\t\t\t\t\t// then set `value` to `undefined`.\r\n\t\t\t\t\tif (isExpanded && this.list.getFocusedItemIndex() === undefined)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Don't submit the form.\r\n\t\t\t\t\t\tevent.preventDefault()\r\n\t\t\t\t\t\tthis.setValue(undefined)\r\n\r\n\t\t\t\t\t\tthis.collapsedDueToEmptyValueOnEnter = true\r\n\t\t\t\t\t\tthis.collapse()\r\n\t\t\t\t\t\tthis.collapsedDueToEmptyValueOnEnter = undefined\r\n\r\n\t\t\t\t\t\treturn\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!isExpanded)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// If `value` is `undefined` and input value is empty\r\n\t\t\t\t\t\t// then by default it submits the form.\r\n\t\t\t\t\t\tif (isEmptyValue(value))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// If the value is required then expand the options list.\r\n\t\t\t\t\t\t\tif (required)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Don't submit the form\r\n\t\t\t\t\t\t\t\tevent.preventDefault()\r\n\t\t\t\t\t\t\t\tthis.expand()\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// If the input value has been cleared\r\n\t\t\t\t\t\t// and the options list is collapsed\r\n\t\t\t\t\t\t// (for example, via Escape key)\r\n\t\t\t\t\t\t// then set `value` to `undefined`\r\n\t\t\t\t\t\t// and don't submit the form.\r\n\t\t\t\t\t\tevent.preventDefault()\r\n\t\t\t\t\t\tthis.setValue(undefined)\r\n\t\t\t\t\t\treturn\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Select the currently focused item (if expanded).\r\n\t\t\t\tif (isExpanded)\r\n\t\t\t\t{\r\n\t\t\t\t\t// Don't submit the form.\r\n\t\t\t\t\tevent.preventDefault()\r\n\t\t\t\t\t// Choose the focused option.\r\n\t\t\t\t\tthis.list.chooseFocusedItem()\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn\r\n\t\t}\r\n\t}\r\n\r\n\tthrottleFetchOptionsCall(resolve)\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tthrottle,\r\n\t\t\tminCharactersToStartThrottling\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst { inputValue } = this.state\r\n\r\n\t\tconst wait = throttle - (Date.now() - this.latestFetchOptionsCallTimestamp)\r\n\r\n\t\tif (inputValue.length >= minCharactersToStartThrottling && wait > 0)\r\n\t\t{\r\n\t\t\tif (!this.nextFetchOptionsCallTimeout)\r\n\t\t\t{\r\n\t\t\t\tthis.nextFetchOptionsCallTimeout = setTimeout(() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.nextFetchOptionsCallTimeout = undefined\r\n\t\t\t\t\tthis.latestFetchOptionsCall()\r\n\t\t\t\t},\r\n\t\t\t\twait)\r\n\t\t\t}\r\n\r\n\t\t\tthis.latestFetchOptionsCall = () => this.refreshOptions().then(resolve)\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\tfetchDefaultOptions = () =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tgetOptions,\r\n\t\t\tfilterOptions\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\treturn Promise.resolve().then(() =>\r\n\t\t{\r\n\t\t\treturn getOptions ? getOptions('') : filterOptions(this.props.options, '')\r\n\t\t})\r\n\t\t.then((options) =>\r\n\t\t{\r\n\t\t\treturn new Promise(resolve => this.setState({ options }, resolve))\r\n\t\t})\r\n\t}\r\n\r\n\trefreshOptions = () =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tgetOptions,\r\n\t\t\tfilterOptions\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst { inputValue } = this.state\r\n\r\n\t\treturn new Promise((resolve) =>\r\n\t\t{\r\n\t\t\t// If throttled then schedule a future invocation.\r\n\t\t\tif (getOptions)\r\n\t\t\t{\r\n\t\t\t\tif (this.throttleFetchOptionsCall(resolve)) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.latestFetchOptionsCallTimestamp = Date.now()\r\n\r\n\t\t\t\tconst counter = this.counter.getNextCounter()\r\n\r\n\t\t\t\treturn this.setState\r\n\t\t\t\t({\r\n\t\t\t\t\tisFetchingOptions : true,\r\n\t\t\t\t\tfetchingOptionsCounter : counter\r\n\t\t\t\t},\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tgetOptions(inputValue).then((options) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.handleNewOptions(options, counter, resolve)\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tconst newOptions = filterOptions(this.props.options, inputValue)\r\n\t\t\tthis.handleNewOptions(newOptions, null, resolve)\r\n\t\t})\r\n\t}\r\n\r\n\thandleNewOptions = (options, counter, resolve) =>\r\n\t{\r\n\t\tPromise.resolve(options).then((options) =>\r\n\t\t{\r\n\t\t\t// Autocomplete should always display some options.\r\n\t\t\tif (options.length === 0 && this.state.options.length === 0)\r\n\t\t\t{\r\n\t\t\t\treturn this.fetchDefaultOptions().then(() => options)\r\n\t\t\t}\r\n\t\t\treturn options\r\n\t\t})\r\n\t\t.then((options) =>\r\n\t\t{\r\n\t\t\tthis.receiveNewOptions(options, counter, resolve)\r\n\t\t})\r\n\t\t.catch((error) =>\r\n\t\t{\r\n\t\t\tconsole.error(error)\r\n\t\t\tthis.receiveNewOptions([], counter, resolve)\r\n\t\t})\r\n\t}\r\n\r\n\treceiveNewOptions(options, counter, callback)\r\n\t{\r\n\t\tconst {\r\n\t\t\tgetOptions,\r\n\t\t\thighlightFirstOption\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tisExpanded,\r\n\t\t\tmatchesCounter,\r\n\t\t\toptionsCounter,\r\n\t\t\tfetchingOptionsCounter\r\n\t\t} = this.state\r\n\r\n\t\tconst newState = {}\r\n\r\n\t\tif (getOptions)\r\n\t\t{\r\n\t\t\t// Can only override \"older\" matching state.\r\n\t\t\tif (isCounterAfter(counter, matchesCounter))\r\n\t\t\t{\r\n\t\t\t\tnewState.matches = options.length > 0\r\n\t\t\t\tnewState.matchesCounter = counter\r\n\t\t\t}\r\n\r\n\t\t\t// Update options.\r\n\t\t\t// Can only override \"older\" options.\r\n\t\t\t// (not \"newer\" ones)\r\n\t\t\tif (isCounterAfter(counter, optionsCounter))\r\n\t\t\t{\r\n\t\t\t\t// Autocomplete should always display some options.\r\n\t\t\t\tif (options.length > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tnewState.options = options\r\n\t\t\t\t\tnewState.optionsCounter = counter\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (counter === fetchingOptionsCounter)\r\n\t\t\t{\r\n\t\t\t\tnewState.isFetchingOptions = false\r\n\t\t\t\tnewState.fetchingOptionsCounter = undefined\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tnewState.matches = options.length > 0\r\n\r\n\t\t\t// Autocomplete should always display some options.\r\n\t\t\tif (options.length > 0)\r\n\t\t\t{\r\n\t\t\t\tnewState.options = options\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (newState.matches === false && !highlightFirstOption) {\r\n\t\t\tif (isExpanded) {\r\n\t\t\t\tthis.list.clearFocus()\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setState(newState, callback)\r\n\t}\r\n\r\n\tsetValue = (newValue) =>\r\n\t{\r\n\t\tconst { value, onChange } = this.props\r\n\t\tconst { options } = this.state\r\n\r\n\t\tconst selectedOption = options.filter(_ => _.value === newValue)[0]\r\n\r\n\t\tthis.setState\r\n\t\t({\r\n\t\t\tselectedOption,\r\n\t\t\tinputValue : selectedOption ? selectedOption.label : ''\r\n\t\t})\r\n\r\n\t\t// Call `onChange` only if the `value` did change.\r\n\t\tif (newValue !== value) {\r\n\t\t\tonChange(newValue)\r\n\t\t}\r\n\t}\r\n\r\n\tonBlur = (event) => {\r\n\t\tconst { onBlur, value } = this.props\r\n\t\tif (onBlur) {\r\n\t\t\tonBlurForReduxForm(onBlur, event, value)\r\n\t\t}\r\n\t\tthis.list && this.list.onBlur(event)\r\n\t}\r\n\r\n\tonClick = (event) =>\r\n\t{\r\n\t\tconst { disabled } = this.props\r\n\r\n\t\tif (!disabled) {\r\n\t\t\tthis.expandOnFocus()\r\n\t\t}\r\n\t}\r\n\r\n\tonFocusOut = (event) =>\r\n\t{\r\n\t\tlet { onBlur, value } = this.props\r\n\t\tconst { inputValue } = this.state\r\n\r\n\t\t// `window.rruiCollapseOnFocusOut` can be used\r\n\t\t// for debugging expandable contents.\r\n\t\tif (window.rruiCollapseOnFocusOut !== false) {\r\n\t\t\tthis.collapse()\r\n\t\t}\r\n\r\n\t\tif (!inputValue)\r\n\t\t{\r\n\t\t\tvalue = undefined\r\n\t\t\tthis.setValue(value)\r\n\t\t}\r\n\r\n\t\tif (onBlur) {\r\n\t\t\tonBlurForReduxForm(onBlur, event, value)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction isEmptyValue(value)\r\n{\r\n\treturn value === null || value === undefined\r\n}\r\n\r\n// Filters options by substring inclusion (case-insensitive).\r\nfunction filterOptions(options, value)\r\n{\r\n\t// If the input value is `undefined` or empty.\r\n\tif (!value) {\r\n\t\treturn options\r\n\t}\r\n\r\n\tvalue = value.toLowerCase()\r\n\r\n\treturn options.filter(({ label }) => label.toLowerCase().indexOf(value) >= 0)\r\n}\r\n\r\nclass Counter\r\n{\r\n\tcounter = 0\r\n\r\n\tgetNextCounter()\r\n\t{\r\n\t\tif (this.counter < MAX_SAFE_INTEGER) {\r\n\t\t\tthis.counter++\r\n\t\t} else {\r\n\t\t\tthis.counter = 1\r\n\t\t}\r\n\t\treturn this.counter\r\n\t}\r\n}\r\n\r\n// `MAX_SAFE_INTEGER` is not supported by older browsers\r\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || (Math.pow(2, 53) - 1)\r\n\r\n// Can only override \"older\" options.\r\n// (not \"newer\" ones)\r\nfunction isCounterAfter(counter, currentStateCounter)\r\n{\r\n\tconst diff = counter - currentStateCounter\r\n\r\n\t// If the new options are \"newer\" than the current ones,\r\n\t// then they can override them.\r\n\t// (also accounts for counter overflow)\r\n\treturn diff > 0 || (diff < 0 && Math.abs(diff) > MAX_SAFE_INTEGER / 2)\r\n}\r\n\r\nfunction generateRandomString() {\r\n\treturn Math.random().toString().replace(/\\D/g , '')\r\n}"]}