{"version":3,"sources":["../../source/style/twitter.js"],"names":["canonical","day","hour","getStep","getDate","intlDateTimeFormatSupported","formatters","gradation","threshold","format","value","locale","this_year","Intl","DateTimeFormat","month","now","future","nextYear","Date","getFullYear","getTime","thisYear","other","year","flavour"],"mappings":"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","sourcesContent":["import { canonical, day, hour, getStep, getDate } from '../gradation'\r\nimport { intlDateTimeFormatSupported } from '../locale'\r\n\r\n// A cache for `Intl.DateTimeFormat` twitter formatters\r\n// for various locales (is a global variable).\r\nconst formatters = {}\r\n\r\n// Twitter style relative time formatting.\r\n// (\"1m\", \"2h\", \"Mar 3\", \"Apr 4, 2012\").\r\n// Seconds, minutes and hours are shown relatively,\r\n// and other intervals can be shown using full date format.\r\nexport default\r\n{\r\n\t// Twitter gradation is derived from \"canonical\" gradation\r\n\t// adjusting its \"minute\" `threshold` to be 45.\r\n\tgradation: [\r\n\t\t// Minutes\r\n\t\t{\r\n\t\t\t...getStep(canonical, 'minute'),\r\n\t\t\tthreshold: 45\r\n\t\t},\r\n\t\t// Hours\r\n\t\tgetStep(canonical, 'hour'),\r\n\t\t// If `date` and `now` happened the same year,\r\n\t\t// then only output month and day.\r\n\t\t{\r\n\t\t\tthreshold: day - 0.5 * hour,\r\n\t\t\tformat(value, locale) {\r\n\t\t\t\t// Whether can use `Intl.DateTimeFormat`.\r\n\t\t\t\t// If `Intl` is not available,\r\n\t\t\t\t// or the locale is not supported,\r\n\t\t\t\t// then don't override the default labels.\r\n\t\t\t\t/* istanbul ignore if */\r\n\t\t\t\tif (!intlDateTimeFormatSupported()) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (!formatters[locale]) {\r\n\t\t\t\t\tformatters[locale] = {}\r\n\t\t\t\t}\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (!formatters[locale].this_year) {\r\n\t\t\t\t\t// \"Apr 11\" (MMMd)\r\n\t\t\t\t\tformatters[locale].this_year = new Intl.DateTimeFormat(locale, {\r\n\t\t\t\t\t\tmonth : 'short',\r\n\t\t\t\t\t\tday   : 'numeric'\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\t// Output month and day.\r\n\t\t\t\treturn formatters[locale].this_year.format(getDate(value))\r\n\t\t\t}\r\n\t\t},\r\n\t\t// If `date` and `now` happened in defferent years,\r\n\t\t// then output day, month and year.\r\n\t\t{\r\n\t\t\tthreshold(now, future) {\r\n\t\t\t\tif (future) {\r\n\t\t\t\t\t// Jan 1st 00:00 of the next year.\r\n\t\t\t\t\tconst nextYear = new Date(new Date(now).getFullYear() + 1, 0)\r\n\t\t\t\t\treturn (nextYear.getTime() - now) / 1000\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Jan 1st of the current year.\r\n\t\t\t\t\tconst thisYear = new Date(new Date(now).getFullYear(), 0)\r\n\t\t\t\t\treturn (now - thisYear.getTime()) / 1000\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tformat(value, locale) {\r\n\t\t\t\t// Whether can use `Intl.DateTimeFormat`.\r\n\t\t\t\t// If `Intl` is not available,\r\n\t\t\t\t// or the locale is not supported,\r\n\t\t\t\t// then don't override the default labels.\r\n\t\t\t\t/* istanbul ignore if */\r\n\t\t\t\tif (!intlDateTimeFormatSupported()) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\t/* istanbul ignore if */\r\n\t\t\t\tif (!formatters[locale]) {\r\n\t\t\t\t\tformatters[locale] = {}\r\n\t\t\t\t}\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (!formatters[locale].other) {\r\n\t\t\t\t\t// \"Apr 11, 2017\" (yMMMd)\r\n\t\t\t\t\tformatters[locale].other = new Intl.DateTimeFormat(locale, {\r\n\t\t\t\t\t\tyear  : 'numeric',\r\n\t\t\t\t\t\tmonth : 'short',\r\n\t\t\t\t\t\tday   : 'numeric'\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\t// Output day, month and year.\r\n\t\t\t\treturn formatters[locale].other.format(getDate(value))\r\n\t\t\t}\r\n\t\t}\r\n\t],\r\n\r\n\tflavour: [\r\n\t\t'tiny',\r\n\t\t'short-time',\r\n\t\t'narrow',\r\n\t\t'short'\r\n\t]\r\n}\r\n"],"file":"twitter.js"}