{"version":3,"sources":["../source/LocaleDataStore.js"],"names":["defaultLocale","localesData","getLocaleData","locale","addLocaleData","localeData","Error"],"mappings":";;;;;;;AAAA;AACA;AACA,IAAIA,aAAa,GAAG,IAApB,C,CAEA;AACA;;AACA,IAAMC,WAAW,GAAG,EAApB;;AAEO,SAASC,aAAT,CAAuBC,MAAvB,EAA+B;AACrC,SAAOF,WAAW,CAACE,MAAD,CAAlB;AACA;;AAEM,SAASC,aAAT,CAAuBC,UAAvB,EAAmC;AACzC,MAAI,CAACA,UAAL,EAAiB;AAChB,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACA,GAHwC,CAIzC;AACA;;;AACAL,EAAAA,WAAW,CAACI,UAAU,CAACF,MAAZ,CAAX,GAAiCE,UAAjC;AACA","sourcesContent":["// Fallback locale.\r\n// (when not a single one of the supplied \"preferred\" locales is available)\r\nlet defaultLocale = 'en'\r\n\r\n// For all locales added\r\n// their relative time formatter messages will be stored here.\r\nconst localesData = {}\r\n\r\nexport function getLocaleData(locale) {\r\n\treturn localesData[locale]\r\n}\r\n\r\nexport function addLocaleData(localeData) {\r\n\tif (!localeData) {\r\n\t\tthrow new Error('[javascript-time-ago] No locale data passed.')\r\n\t}\r\n\t// This locale data is stored in a global variable\r\n\t// and later used when calling `.format(time)`.\r\n\tlocalesData[localeData.locale] = localeData\r\n}"],"file":"LocaleDataStore.js"}