{"version":3,"sources":["../source/JavascriptTimeAgo.js"],"names":["UNITS","JavascriptTimeAgo","locales","locale","concat","RelativeTimeFormat","getDefaultLocale","getLocaleData","Intl","NumberFormat","numberFormat","relativeTimeFormatCache","Cache","input","style","defaultStyle","twitterStyle","timeStyle","getDateAndTimeBeingFormatted","date","time","flavour","localeData","now","Date","elapsed","custom","undefined","units","getTimeIntervalMeasurementUnits","length","console","error","join","step","gradation","format","unit","factor","granularity","amount","Math","abs","round","getNowMessage","sign","getFormatter","formatValue","value","getRule","replace","formatNumber","unitRules","quantifierRules","quantify","quantifier","other","number","String","flavor","get","put","_","setDefaultLocale","addLocale","constructor","isMockedDate","getTime","Error","object","restrictedSetOfUnits","Object","keys","filter","indexOf","second","current","unshift","past","future"],"mappings":"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","sourcesContent":["import RelativeTimeFormat from 'relative-time-format'\r\n\r\nimport Cache from './cache'\r\nimport grade from './grade'\r\nimport chooseLocale from './locale'\r\nimport { twitterStyle, timeStyle, defaultStyle } from './style'\r\n\r\nimport {\r\n\taddLocaleData,\r\n\tgetLocaleData\r\n} from './LocaleDataStore'\r\n\r\n// const EXTRA_STYLES = [\r\n// \t'long-convenient',\r\n// \t'long-time',\r\n// \t'short-convenient',\r\n// \t'short-time',\r\n// \t'tiny'\r\n// ]\r\n\r\n// Valid time units.\r\nconst UNITS = [\r\n\t'now',\r\n\t// The rest are the same as in `Intl.RelativeTimeFormat`.\r\n\t'second',\r\n\t'minute',\r\n\t'hour',\r\n\t'day',\r\n\t'week',\r\n\t'month',\r\n\t'quarter',\r\n\t'year'\r\n]\r\n\r\nexport default class JavascriptTimeAgo\r\n{\r\n\t/**\r\n\t * @param {(string|string[])} locales=[] - Preferred locales (or locale).\r\n\t */\r\n\tconstructor(locales = [])\r\n\t{\r\n\t\t// Convert `locales` to an array.\r\n\t\tif (typeof locales === 'string') {\r\n\t\t\tlocales = [locales]\r\n\t\t}\r\n\r\n\t\t// Choose the most appropriate locale\r\n\t\t// (one of the previously added ones)\r\n\t\t// based on the list of preferred `locales` supplied by the user.\r\n\t\tthis.locale = chooseLocale(\r\n\t\t\tlocales.concat(RelativeTimeFormat.getDefaultLocale()),\r\n\t\t\tgetLocaleData\r\n\t\t)\r\n\r\n\t\t// Use `Intl.NumberFormat` for formatting numbers (when available).\r\n\t\tif (typeof Intl !== 'undefined' && Intl.NumberFormat) {\r\n\t\t\tthis.numberFormat = new Intl.NumberFormat(this.locale)\r\n\t\t}\r\n\r\n\t\t// Cache `Intl.RelativeTimeFormat` instance.\r\n\t\tthis.relativeTimeFormatCache = new Cache()\r\n\t}\r\n\r\n\t// Formats the relative date/time.\r\n\t//\r\n\t// @return {string} Returns the formatted relative date/time.\r\n\t//\r\n\t// @param {(Object|string)} [style] - Relative date/time formatting style.\r\n\t//\r\n\t// @param {string[]} [style.units] - A list of allowed time units\r\n\t//                                  (e.g. ['second', 'minute', 'hour', â€¦])\r\n\t//\r\n\t// @param {Function} [style.custom] - `function ({ elapsed, time, date, now })`.\r\n\t//                                    If this function returns a value, then\r\n\t//                                    the `.format()` call will return that value.\r\n\t//                                    Otherwise it has no effect.\r\n\t//\r\n\t// @param {string} [style.flavour] - e.g. \"long\", \"short\", \"tiny\", etc.\r\n\t//\r\n\t// @param {Object[]} [style.gradation] - Time scale gradation steps.\r\n\t//\r\n\t// @param {string} style.gradation[].unit - Time interval measurement unit.\r\n\t//                                          (e.g. ['second', 'minute', 'hour', â€¦])\r\n\t//\r\n\t// @param {Number} style.gradation[].factor - Time interval measurement unit factor.\r\n\t//                                            (e.g. `60` for 'minute')\r\n\t//\r\n\t// @param {Number} [style.gradation[].granularity] - A step for the unit's \"amount\" value.\r\n\t//                                                   (e.g. `5` for '0 minutes', '5 minutes', etc)\r\n\t//\r\n\t// @param {Number} [style.gradation[].threshold] - Time interval measurement unit threshold.\r\n\t//                                                 (e.g. `45` seconds for 'minute').\r\n\t//                                                 There can also be specific `threshold_[unit]`\r\n\t//                                                 thresholds for fine-tuning.\r\n\t//\r\n\tformat(input, style = defaultStyle)\r\n\t{\r\n\t\tif (typeof style === 'string')\r\n\t\t{\r\n\t\t\tswitch (style)\r\n\t\t\t{\r\n\t\t\t\tcase 'twitter':\r\n\t\t\t\t\tstyle = twitterStyle\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 'time':\r\n\t\t\t\t\tstyle = timeStyle\r\n\t\t\t\t\tbreak\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tstyle = defaultStyle\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst { date, time } = getDateAndTimeBeingFormatted(input)\r\n\r\n\t\t// Get locale messages for this formatting flavour\r\n\t\tconst { flavour, localeData } = this.getLocaleData(style.flavour)\r\n\r\n\t\t// Can pass a custom `now`, e.g. for testing purposes.\r\n\t\t// Technically it doesn't belong to `style`\r\n\t\t// but since this is an undocumented internal feature,\r\n\t\t// taking it from the `style` argument will do (for now).\r\n\t\tconst now = style.now || Date.now()\r\n\r\n\t\t// how much time elapsed (in seconds)\r\n\t\tconst elapsed = (now - time) / 1000 // in seconds\r\n\r\n\t\t// `custom` â€“ A function of `{ elapsed, time, date, now, locale }`.\r\n\t\t// If this function returns a value, then the `.format()` call will return that value.\r\n\t\t// Otherwise the relative date/time is formatted as usual.\r\n\t\t// This feature is currently not used anywhere and is here\r\n\t\t// just for providing the ultimate customization point\r\n\t\t// in case anyone would ever need that. Prefer using\r\n\t\t// `gradation[step].format(value, locale)` instead.\r\n\t\t//\r\n\t\t// I guess `custom` is deprecated and will be removed\r\n\t\t// in some future major version release.\r\n\t\t//\r\n\t\tif (style.custom)\r\n\t\t{\r\n\t\t\tconst custom = style.custom({\r\n\t\t\t\tnow,\r\n\t\t\t\tdate,\r\n\t\t\t\ttime,\r\n\t\t\t\telapsed,\r\n\t\t\t\tlocale : this.locale\r\n\t\t\t})\r\n\r\n\t\t\tif (custom !== undefined) {\r\n\t\t\t\treturn custom\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Available time interval measurement units.\r\n\t\tconst units = getTimeIntervalMeasurementUnits(localeData, style.units)\r\n\t\t// If no available time unit is suitable, just output an empty string.\r\n\t\tif (units.length === 0) {\r\n\t\t\tconsole.error(`Units \"${units.join(', ')}\" were not found in locale data for \"${this.locale}\".`)\r\n\t\t\treturn ''\r\n\t\t}\r\n\r\n\t\t// Choose the appropriate time measurement unit\r\n\t\t// and get the corresponding rounded time amount.\r\n\t\tconst step = grade(\r\n\t\t\telapsed,\r\n\t\t\tnow,\r\n\t\t\tunits,\r\n\t\t\tstyle.gradation\r\n\t\t)\r\n\r\n\t\t// If no time unit is suitable, just output an empty string.\r\n\t\t// E.g. when \"now\" unit is not available\r\n\t\t// and \"second\" has a threshold of `0.5`\r\n\t\t// (e.g. the \"canonical\" grading scale).\r\n\t\tif (!step) {\r\n\t\t\treturn ''\r\n\t\t}\r\n\r\n\t\tif (step.format) {\r\n\t\t\treturn step.format(date || time, this.locale)\r\n\t\t}\r\n\r\n\t\tconst { unit, factor, granularity } = step\r\n\r\n\t\tlet amount = Math.abs(elapsed) / factor\r\n\r\n\t\t// Apply granularity to the time amount\r\n\t\t// (and fallback to the previous step\r\n\t\t//  if the first level of granularity\r\n\t\t//  isn't met by this amount)\r\n\t\tif (granularity) {\r\n\t\t\t// Recalculate the elapsed time amount based on granularity\r\n\t\t\tamount = Math.round(amount / granularity) * granularity\r\n\t\t}\r\n\r\n\t\t// `Intl.RelativeTimeFormat` doesn't operate in \"now\" units.\r\n\t\tif (unit === 'now') {\r\n\t\t\treturn getNowMessage(localeData, -1 * Math.sign(elapsed))\r\n\t\t}\r\n\r\n\t\tswitch (flavour) {\r\n\t\t\tcase 'long':\r\n\t\t\tcase 'short':\r\n\t\t\tcase 'narrow':\r\n\t\t\t\t// Format `value` using `Intl.RelativeTimeFormat`.\r\n\t\t\t\treturn this.getFormatter(flavour).format(-1 * Math.sign(elapsed) * Math.round(amount), unit)\r\n\t\t\tdefault:\r\n\t\t\t\t// Format `value`.\r\n\t\t\t\t// (mimicks `Intl.RelativeTimeFormat` with the addition of extra styles)\r\n\t\t\t\treturn this.formatValue(-1 * Math.sign(elapsed) * Math.round(amount), unit, localeData)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Mimicks what `Intl.RelativeTimeFormat` does for additional locale styles.\r\n\t * @param  {number} value\r\n\t * @param  {string} unit\r\n\t * @param  {object} localeData â€” Relative time messages for the flavor.\r\n\t * @return {string}\r\n\t */\r\n\tformatValue(value, unit, localeData) {\r\n\t\treturn this.getRule(value, unit, localeData).replace('{0}', this.formatNumber(Math.abs(value)))\r\n\t}\r\n\r\n\t/**\r\n\t * Returns formatting rule for `value` in `units` (either in past or in future).\r\n\t * @param {number} value - Time interval value.\r\n\t * @param {string} unit - Time interval measurement unit.\r\n\t * @param  {object} localeData â€” Relative time messages for the flavor.\r\n\t * @return {string}\r\n\t * @example\r\n\t * // Returns \"{0} days ago\"\r\n\t * getRule(-2, \"day\")\r\n\t */\r\n\tgetRule(value, unit, localeData) {\r\n\t\tconst unitRules = localeData[unit]\r\n\t\t// Bundle size optimization technique.\r\n\t\tif (typeof unitRules === 'string') {\r\n\t\t\treturn unitRules\r\n\t\t}\r\n\t\t// Choose either \"past\" or \"future\" based on time `value` sign.\r\n\t\t// If \"past\" is same as \"future\" then they're stored as \"other\".\r\n\t\t// If there's only \"other\" then it's being collapsed.\r\n\t\tconst quantifierRules = unitRules[value <= 0 ? 'past' : 'future'] || unitRules\r\n\t\t// Bundle size optimization technique.\r\n\t\tif (typeof quantifierRules === 'string') {\r\n\t\t\treturn quantifierRules\r\n\t\t}\r\n\t\t// Quantify `value`.\r\n\t\tconst quantify = getLocaleData(this.locale).quantify\r\n\t\tlet quantifier = quantify && quantify(Math.abs(value))\r\n\t\t// There seems to be no such locale in CLDR\r\n\t\t// for which `quantify` is missing\r\n\t\t// and still `past` and `future` messages\r\n\t\t// contain something other than \"other\".\r\n\t\t/* istanbul ignore next */\r\n\t\tquantifier = quantifier || 'other'\r\n\t\t// \"other\" rule is supposed to always be present.\r\n\t\t// If only \"other\" rule is present then \"rules\" is not an object and is a string.\r\n\t\treturn quantifierRules[quantifier] || quantifierRules.other\r\n\t}\r\n\r\n\t/**\r\n\t * Formats a number into a string.\r\n\t * Uses `Intl.NumberFormat` when available.\r\n\t * @param  {number} number\r\n\t * @return {string}\r\n\t */\r\n\tformatNumber(number) {\r\n\t\treturn this.numberFormat ? this.numberFormat.format(number) : String(number)\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an `Intl.RelativeTimeFormat` for a given `flavor`.\r\n\t * @param {string} flavor\r\n\t * @return {object} `Intl.RelativeTimeFormat` instance\r\n\t */\r\n\tgetFormatter(flavor) {\r\n\t\t// `Intl.RelativeTimeFormat` instance creation is assumed a\r\n\t\t// lengthy operation so the instances are cached and reused.\r\n\t\treturn this.relativeTimeFormatCache.get(this.locale, flavor) ||\r\n\t\t\tthis.relativeTimeFormatCache.put(this.locale, flavor, new RelativeTimeFormat(this.locale, { style: flavor }))\r\n\t}\r\n\r\n\t/**\r\n\t * Gets locale messages for this formatting flavour\r\n\t *\r\n\t * @param {(string|string[])} flavour - Relative date/time formatting flavour.\r\n\t *                                      If it's an array then all flavours are tried in order.\r\n\t *\r\n\t * @returns {Object} Returns an object of shape { flavour, localeData }\r\n\t */\r\n\tgetLocaleData(flavour = []) {\r\n\t\t// Get relative time formatting rules for this locale\r\n\t\tconst localeData = getLocaleData(this.locale)\r\n\r\n\t\t// Convert `flavour` to an array.\r\n\t\tif (typeof flavour === 'string') {\r\n\t\t\tflavour = [flavour]\r\n\t\t}\r\n\r\n\t\t// \"long\" flavour is the default one.\r\n\t\t// (it's always present)\r\n\t\tflavour = flavour.concat('long')\r\n\r\n\t\t// Find a suitable flavour.\r\n\t\tfor (const _ of flavour) {\r\n\t\t\tif (localeData[_]) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tflavour : _,\r\n\t\t\t\t\tlocaleData : localeData[_]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Can't happen - \"long\" flavour is always present.\r\n\t\t// throw new Error(`None of the flavours - ${flavour.join(', ')} - was found for locale \"${this.locale}\".`)\r\n\t}\r\n}\r\n\r\n/**\r\n * Gets default locale.\r\n * @return  {string} locale\r\n */\r\nJavascriptTimeAgo.getDefaultLocale = RelativeTimeFormat.getDefaultLocale\r\n\r\n/**\r\n * Sets default locale.\r\n * @param  {string} locale\r\n */\r\nJavascriptTimeAgo.setDefaultLocale = RelativeTimeFormat.setDefaultLocale\r\n\r\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n */\r\nJavascriptTimeAgo.addLocale = function(localeData) {\r\n\taddLocaleData(localeData)\r\n\tRelativeTimeFormat.addLocale(localeData)\r\n}\r\n\r\n/**\r\n * (legacy alias)\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n * @deprecated\r\n */\r\nJavascriptTimeAgo.locale = JavascriptTimeAgo.addLocale\r\n\r\n// Normalizes `.format()` `time` argument.\r\nfunction getDateAndTimeBeingFormatted(input)\r\n{\r\n\tif (input.constructor === Date || isMockedDate(input))\r\n\t{\r\n\t\treturn {\r\n\t\t\tdate : input,\r\n\t\t\ttime : input.getTime()\r\n\t\t}\r\n\t}\r\n\r\n\tif (typeof input === 'number')\r\n\t{\r\n\t\treturn {\r\n\t\t\ttime : input,\r\n\t\t\t// `date` is not required for formatting\r\n\t\t\t// relative times unless \"twitter\" preset is used.\r\n\t\t\t// date : new Date(input)\r\n\t\t}\r\n\t}\r\n\r\n\t// For some weird reason istanbul doesn't see this `throw` covered.\r\n\t/* istanbul ignore next */\r\n\tthrow new Error(`Unsupported relative time formatter input: ${typeof input}, ${input}`)\r\n}\r\n\r\n// During testing via some testing libraries `Date`s aren't actually `Date`s.\r\n// https://github.com/catamphetamine/javascript-time-ago/issues/22\r\nfunction isMockedDate(object) {\r\n\treturn typeof object === 'object' && typeof object.getTime === 'function'\r\n}\r\n\r\n// Get available time interval measurement units.\r\nfunction getTimeIntervalMeasurementUnits(localeData, restrictedSetOfUnits)\r\n{\r\n\t// All available time interval measurement units.\r\n\tlet units = Object.keys(localeData)\r\n\r\n\t// If only a specific set of available\r\n\t// time measurement units can be used.\r\n\tif (restrictedSetOfUnits) {\r\n\t\t// Reduce available time interval measurement units\r\n\t\t// based on user's preferences.\r\n\t\tunits = restrictedSetOfUnits.filter(_ => units.indexOf(_) >= 0)\r\n\t}\r\n\r\n\t// Stock `Intl.RelativeTimeFormat` locale data doesn't have \"now\" units.\r\n\t// So either \"now\" is present in extended locale data\r\n\t// or it's taken from \".second.current\".\r\n\tif ((!restrictedSetOfUnits || restrictedSetOfUnits.indexOf('now') >= 0) &&\r\n\t\tunits.indexOf('now') < 0) {\r\n\t\tif (localeData.second.current) {\r\n\t\t\tunits.unshift('now')\r\n\t\t}\r\n\t}\r\n\r\n\treturn units\r\n}\r\n\r\nfunction getNowMessage(localeData, value) {\r\n\t// Specific \"now\" message form extended locale data (if present).\r\n\tif (localeData.now) {\r\n\t\t// Bundle size optimization technique.\r\n\t\tif (typeof localeData.now === 'string') {\r\n\t\t\treturn localeData.now\r\n\t\t}\r\n\t\t// Not handling `value === 0` as `localeData.now.current` here\r\n\t\t// because it wouldn't make sense: \"now\" is a moment,\r\n\t\t// so one can't possibly differentiate between a\r\n\t\t// \"previous\" moment, a \"current\" moment and a \"next moment\".\r\n\t\t// It can only be differentiated between \"past\" and \"future\".\r\n\t\tif (value <= 0) {\r\n\t\t\treturn localeData.now.past\r\n\t\t} else {\r\n\t\t\treturn localeData.now.future\r\n\t\t}\r\n\t}\r\n\t// Use \".second.current\" as \"now\" message.\r\n\treturn localeData.second.current\r\n\t// If this function was called then\r\n\t// it means that either \"now\" unit messages are\r\n\t// available or \".second.current\" message is present.\r\n}"],"file":"JavascriptTimeAgo.js"}