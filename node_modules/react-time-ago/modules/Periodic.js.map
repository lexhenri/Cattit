{"version":3,"sources":["../source/Periodic.js"],"names":["Periodic","period","subscribers","trigger","dry_run","subscriber","schedule","scheduled","setTimeout","clearTimeout","undefined","indexOf","push","length","start","remove","splice","stop"],"mappings":";;;;AAAA;;;IAGqBA,Q;;AAKpB;;;AAGA,mBAAYC,MAAZ,EACA;AAAA;;AAAA;;AAAA,OANAC,WAMA,GANc,EAMd;;AAAA,OAoBAC,OApBA,GAoBU,UAACC,OAAD,EACV;AACC;AACA,wBAAyB,MAAKF,WAA9B,kHAA2C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,QAAhCG,UAAgC;;AAC1CA;AACA;;AAED;AACA,SAAKC,QAAL;AACA,GA7BD;;AACC,OAAKL,MAAL,GAAcA,MAAd;AACA;AATD;;;;;0BAYA;AACC;AACA,OAAI,KAAKM,SAAT,EAAoB;AACnB;AACA;;AAED;AACA,QAAKD,QAAL;AACA;;;6BAGD;AACC,QAAKC,SAAL,GAAiBC,WAAW,KAAKL,OAAhB,EAAyB,KAAKF,MAA9B,CAAjB;AACA;;;yBAcD;AACCQ,gBAAa,KAAKF,SAAlB;AACA,QAAKA,SAAL,GAAiBG,SAAjB;AACA;;;sBAEGL,U,EACJ;AAAA;;AACC;AACA;AACA,OAAI,KAAKH,WAAL,CAAiBS,OAAjB,CAAyBN,UAAzB,IAAuC,CAA3C,EAA8C;AAC7C,SAAKH,WAAL,CAAiBU,IAAjB,CAAsBP,UAAtB;AACA;;AAED;AACA;AACA;AACA,OAAI,KAAKH,WAAL,CAAiBW,MAAjB,KAA4B,CAAhC,EAAmC;AAClC,SAAKC,KAAL;AACA;;AAED;AACA,UAAO;AAAA,WAAM,OAAKC,MAAL,CAAYV,UAAZ,CAAN;AAAA,IAAP;AACA;;;yBAEMA,U,EACP;AACC;AACA;AACA,OAAI,KAAKH,WAAL,CAAiBS,OAAjB,CAAyBN,UAAzB,KAAwC,CAA5C,EAA+C;AAC9C,SAAKH,WAAL,CAAiBc,MAAjB,CAAwB,KAAKd,WAAL,CAAiBS,OAAjB,CAAyBN,UAAzB,CAAxB,EAA8D,CAA9D;AACA;;AAED;AACA;AACA;AACA,OAAI,KAAKH,WAAL,CAAiBW,MAAjB,KAA4B,CAAhC,EAAmC;AAClC,SAAKI,IAAL;AACA;AACD;;;4BAGD;AACC,QAAKA,IAAL;AACA;AACA,QAAKf,WAAL,GAAmB,EAAnB;AACA;;;;;;eAtFmBF,Q","file":"Periodic.js","sourcesContent":["/**\r\n * Calls all subscribers once in a period.\r\n */\r\nexport default class Periodic\r\n{\r\n\t// subscribers = new Set()\r\n\tsubscribers = []\r\n\r\n\t/**\r\n\t * @param {number} period - The interval (in milliseconds).\r\n\t */\r\n\tconstructor(period)\r\n\t{\r\n\t\tthis.period = period\r\n\t}\r\n\r\n\tstart()\r\n\t{\r\n\t\t// Do nothing if already started.\r\n\t\tif (this.scheduled) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Start\r\n\t\tthis.schedule()\r\n\t}\r\n\r\n\tschedule()\r\n\t{\r\n\t\tthis.scheduled = setTimeout(this.trigger, this.period)\r\n\t}\r\n\r\n\ttrigger = (dry_run) =>\r\n\t{\r\n\t\t// Call all subscribers.\r\n\t\tfor (const subscriber of this.subscribers) {\r\n\t\t\tsubscriber()\r\n\t\t}\r\n\r\n\t\t// Schedule next iteration.\r\n\t\tthis.schedule()\r\n\t}\r\n\r\n\tstop()\r\n\t{\r\n\t\tclearTimeout(this.scheduled)\r\n\t\tthis.scheduled = undefined\r\n\t}\r\n\r\n\tadd(subscriber)\r\n\t{\r\n\t\t// Add subscriber.\r\n\t\t// this.subscribers.add(subscriber)\r\n\t\tif (this.subscribers.indexOf(subscriber) < 0) {\r\n\t\t\tthis.subscribers.push(subscriber)\r\n\t\t}\r\n\r\n\t\t// If it's the first subscriber,\r\n\t\t// start this periodical.\r\n\t\t// if (this.subscribers.size === 1) {\r\n\t\tif (this.subscribers.length === 1) {\r\n\t\t\tthis.start()\r\n\t\t}\r\n\r\n\t\t// Return unsubscribe function.\r\n\t\treturn () => this.remove(subscriber)\r\n\t}\r\n\r\n\tremove(subscriber)\r\n\t{\r\n\t\t// Remove subscriber.\r\n\t\t// this.subscribers.delete(subscriber)\r\n\t\tif (this.subscribers.indexOf(subscriber) >= 0) {\r\n\t\t\tthis.subscribers.splice(this.subscribers.indexOf(subscriber), 1)\r\n\t\t}\r\n\r\n\t\t// If it was the last subscriber,\r\n\t\t// stop periodical time refresh.\r\n\t\t// if (this.subscribers.size === 0) {\r\n\t\tif (this.subscribers.length === 0) {\r\n\t\t\tthis.stop()\r\n\t\t}\r\n\t}\r\n\r\n\tdestroy()\r\n\t{\r\n\t\tthis.stop()\r\n\t\t// this.subscribers.clear()\r\n\t\tthis.subscribers = []\r\n\t}\r\n}"]}