{"version":3,"sources":["../source/ReactTimeAgo.js"],"names":["PureComponent","Component","ReactTimeAgo","props","timeAgo","getPreferredLocales","window","verboseDateFormat","formatVerboseDate","tick","updateInterval","_react_time_ago_updater","stopAutoupdate","add","forceUpdate","_date","date","timeStyle","tooltip","container","locale","locales","rest","verboseDate","undefined","getVerboseDate","toISOString","format","createElement","concat","getDefaultLocale","input","convertToDate","propTypes","oneOfType","instanceOf","Date","number","isRequired","string","arrayOf","bool","func","object","defaultProps","weekday","day","month","year","hour","minute","second","constructor","Error","default"],"mappings":"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","file":"ReactTimeAgo.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport JavascriptTimeAgo from 'javascript-time-ago'\r\nimport { style } from 'javascript-time-ago/prop-types'\r\n\r\nimport Periodic from './Periodic'\r\nimport createVerboseDateFormatter from './verboseDateFormatter'\r\nimport { getDate, isMockedDate } from './helpers/date'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\nexport default class ReactTimeAgo extends PureComponent\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// The `date` or `timestamp`.\r\n\t\t// E.g. `new Date()` or `1355972400000`.\r\n\t\tdate : PropTypes.oneOfType([\r\n\t\t\tPropTypes.instanceOf(Date),\r\n\t\t\tPropTypes.number\r\n\t\t]).isRequired,\r\n\r\n\t\t// Preferred locale.\r\n\t\t// Is 'en' by default.\r\n\t\t// E.g. 'ru-RU'.\r\n\t\tlocale : PropTypes.string,\r\n\r\n\t\t// Preferred locales (ordered).\r\n\t\t// Will choose the first suitable locale from this list.\r\n\t\t// (the one that has been initialized)\r\n\t\t// E.g. `['ru-RU', 'en-GB']`.\r\n\t\tlocales : PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t\t// Date/time formatting style.\r\n\t\t// E.g. 'twitter', 'time', or custom (`{ gradation: […], units: […], flavour: 'long', custom: function }`)\r\n\t\ttimeStyle : style,\r\n\r\n\t\t// Whether HTML `tooltip` attribute should be set\r\n\t\t// to verbosely formatted date (is `true` by default).\r\n\t\t// Set to `false` to disable the native HTML `tooltip`.\r\n\t\ttooltip : PropTypes.bool.isRequired,\r\n\r\n\t\t// An optional function returning what will be output in the HTML `title` tooltip attribute.\r\n\t\t// (by default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`)\r\n\t\tformatVerboseDate : PropTypes.func,\r\n\r\n\t\t// `Intl.DateTimeFormat` format for the HTML `title` tooltip attribute.\r\n\t\t// Is used when `formatVerboseDate` is not specified.\r\n\t\t// By default outputs a verbose date.\r\n\t\tverboseDateFormat : PropTypes.object,\r\n\r\n\t\t// How often to update all `<ReactTimeAgo/>` elements on a page.\r\n\t\t// (is once in a minute by default)\r\n\t\tupdateInterval : PropTypes.number,\r\n\r\n\t\t// Set to `false` to disable automatic refresh of\r\n\t\t// `<ReactTimeAgo/>` elements on a page as time goes by.\r\n\t\t// (is `true` by default)\r\n\t\ttick : PropTypes.bool,\r\n\r\n\t\t// React Component to wrap the resulting `<time/>` React Element.\r\n\t\t// Receives `verboseDate` and `children` properties.\r\n\t\t// `verboseDate` can be used for displaying verbose date label\r\n\t\t// in an \"on mouse over\" (or \"on touch\") tooltip.\r\n\t\t//\r\n\t\t// ```js\r\n\t\t// import React from 'react'\r\n\t\t// import ReactTimeAgo from 'react-time-ago'\r\n\t\t// import { Tooltip } from 'react-responsive-ui'\r\n\t\t// \r\n\t\t// export default function TimeAgo(props) {\r\n\t\t//   return <ReactTimeAgo {...props} container={Container} tooltip={false}/>\r\n\t\t// }\r\n\t\t// \r\n\t\t// const Container = ({ verboseDate, children }) => (\r\n\t\t//   <Tooltip content={verboseDate}>\r\n\t\t//     {children}\r\n\t\t//   </Tooltip>\r\n\t\t// )\r\n\t\t// ```\r\n\t\t//\r\n\t\tcontainer : PropTypes.func\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\tlocales : [],\r\n\r\n\t\ttooltip : true,\r\n\r\n\t\t// Thursday, December 20, 2012, 7:00:00 AM GMT+4\r\n\t\tverboseDateFormat:\r\n\t\t{\r\n\t\t\tweekday      : 'long',\r\n\t\t\tday          : 'numeric',\r\n\t\t\tmonth        : 'long',\r\n\t\t\tyear         : 'numeric',\r\n\t\t\thour         : 'numeric',\r\n\t\t\tminute       : '2-digit',\r\n\t\t\tsecond       : '2-digit',\r\n\t\t\t// timeZoneName : 'short'\r\n\t\t},\r\n\r\n\t\t// Updates once a minute\r\n\t\tupdateInterval : 60 * 1000,\r\n\r\n\t\t// Refreshes time in a web browser by default\r\n\t\ttick : true\r\n\t}\r\n\r\n\tconstructor(props)\r\n\t{\r\n\t\t// `this.props` are used in `.getPreferredLocales()`.\r\n\t\tsuper(props)\r\n\r\n\t\t// Create `javascript-time-ago` formatter instance.\r\n\t\tthis.timeAgo = new JavascriptTimeAgo(this.getPreferredLocales())\r\n\r\n\t\t// Create verbose date formatter for the tooltip text.\r\n\t\t// (only on client side, because tooltips aren't rendered until triggered)\r\n\t\tif (typeof window !== 'undefined') {\r\n\t\t\tconst { verboseDateFormat } = this.props\r\n\t\t\tthis.formatVerboseDate = createVerboseDateFormatter(this.getPreferredLocales(), verboseDateFormat)\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\ttick,\r\n\t\t\tupdateInterval\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\t// If time label autoupdates are enabled.\r\n\t\tif (tick)\r\n\t\t{\r\n\t\t\t// Run automatic time label updater (in a web browser).\r\n\t\t\tif (!window._react_time_ago_updater) {\r\n\t\t\t\twindow._react_time_ago_updater = new Periodic(updateInterval)\r\n\t\t\t}\r\n\r\n\t\t\t// Register for the relative time autoupdate as the time goes by.\r\n\t\t\tthis.stopAutoupdate = window._react_time_ago_updater.add(() => this.forceUpdate())\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillUnmount()\r\n\t{\r\n\t\tif (this.stopAutoupdate) {\r\n\t\t\tthis.stopAutoupdate()\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\tdate: _date,\r\n\t\t\ttimeStyle,\r\n\t\t\ttooltip,\r\n\t\t\tcontainer,\r\n\t\t\t// Rest\r\n\t\t\tlocale,\r\n\t\t\tlocales,\r\n\t\t\tformatVerboseDate,\r\n\t\t\tverboseDateFormat,\r\n\t\t\tupdateInterval,\r\n\t\t\ttick,\r\n\t\t\t...rest\r\n\t\t} = this.props\r\n\r\n\t\t// The date or timestamp that was passed.\r\n\t\t// Convert timestamp to `Date`.\r\n\t\tconst date = getDate(_date)\r\n\r\n\t\t// Format verbose date for the tooltip.\r\n\t\t// (only on client side, because tooltips aren't rendered until triggered)\r\n\t\tconst verboseDate = typeof window === 'undefined' ? undefined : this.getVerboseDate(date)\r\n\r\n\t\tconst timeAgo = (\r\n\t\t\t<time\r\n\t\t\t\tdateTime={date.toISOString()}\r\n\t\t\t\ttitle={tooltip ? verboseDate : undefined} \r\n\t\t\t\t{...rest}>\r\n\t\t\t\t{this.timeAgo.format(date, timeStyle)}\r\n\t\t\t</time>\r\n\t\t)\r\n\r\n\t\tif (container) {\r\n\t\t\treturn React.createElement(\r\n\t\t\t\tcontainer,\r\n\t\t\t\t{\r\n\t\t\t\t\tverboseDate,\r\n\t\t\t\t\t...rest\r\n\t\t\t\t},\r\n\t\t\t\ttimeAgo\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\treturn timeAgo\r\n\t}\r\n\r\n\t// Composes a list of preferred locales\r\n\tgetPreferredLocales()\r\n\t{\r\n\t\tconst { locale } = this.props\r\n\t\tlet { locales } = this.props\r\n\r\n\t\t// Convert `locale` to `locales`.\r\n\t\tif (locale) {\r\n\t\t\tlocales = [locale]\r\n\t\t}\r\n\r\n\t\t// `javascript-time-ago` default locale.\r\n\t\tlocales = locales.concat(JavascriptTimeAgo.getDefaultLocale())\r\n\r\n\t\treturn locales\r\n\t}\r\n\r\n\t// Verbose date string.\r\n\t// Is used as a tooltip text.\r\n\t//\r\n\t// E.g. \"Sunday, May 18th, 2012, 18:45\"\r\n\t//\r\n\tgetVerboseDate(input)\r\n\t{\r\n\t\tconst { formatVerboseDate } = this.props\r\n\r\n\t\tif (formatVerboseDate) {\r\n\t\t\treturn formatVerboseDate(convertToDate(input))\r\n\t\t}\r\n\r\n\t\treturn this.formatVerboseDate(convertToDate(input))\r\n\t}\r\n}\r\n\r\n// Converts argument into a `Date`.\r\nfunction convertToDate(input)\r\n{\r\n\tif (input.constructor === Date || isMockedDate(input)) {\r\n\t\treturn input\r\n\t}\r\n\r\n\tif (typeof input === 'number') {\r\n\t\treturn new Date(input)\r\n\t}\r\n\r\n\tthrow new Error(`Unsupported react-time-ago input: ${typeof input}, ${input}`)\r\n}\r\n\r\n// Deprecated CDN legacy export.\r\n// Will be removed in version 6.x\r\nReactTimeAgo.default = ReactTimeAgo\r\n\r\n// ReactTimeAgo.addLocale = (data) => JavascriptTimeAgo.addLocale(data)"]}