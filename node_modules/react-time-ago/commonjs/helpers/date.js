'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.getDate = getDate;
exports.getTime = getTime;
exports.isMockedDate = isMockedDate;
/**
 * Converts value to a `Date`
 * @param {(number|Date)} value
 * @return {Date}
 */
function getDate(value) {
  return isDate(value) ? value : new Date(value);
}

/**
 * Converts value to a timestamp.
 * @param {(number|Date)} value
 * @return {number}
 */
function getTime(value) {
  return isDate(value) ? value.getTime() : value;
}

function isDate(object) {
  return object instanceof Date || isMockedDate(object);
}

// During testing via some testing libraries `Date`s aren't actually `Date`s.
// https://github.com/catamphetamine/javascript-time-ago/issues/22
function isMockedDate(object) {
  return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.getTime === 'function';
}
//# sourceMappingURL=date.js.map