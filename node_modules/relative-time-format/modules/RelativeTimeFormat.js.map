{"version":3,"sources":["../source/RelativeTimeFormat.js"],"names":["getDefaultLocale","setDefaultLocale","getLocaleData","addLocaleData","resolveLocale","UNITS","NUMERIC_VALUES","STYLE_VALUES","RelativeTimeFormat","locales","options","numeric","style","localeMatcher","indexOf","RangeError","push","locale","supportedLocalesOf","TypeError","Intl","NumberFormat","numberFormat","value","unit","getRule","replace","formatNumber","Math","abs","rule","valueIndex","type","parts","slice","length","unitRules","message","current","quantifierRules","quantify","quantifier","other","number","format","String","filter","addLocale"],"mappings":"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","sourcesContent":["import {\r\n  getDefaultLocale,\r\n  setDefaultLocale,\r\n  getLocaleData,\r\n  addLocaleData\r\n} from './LocaleDataStore'\r\n\r\nimport resolveLocale from './resolveLocale'\r\n\r\n// Valid time units.\r\nexport const UNITS = [\r\n  \"second\",\r\n  \"minute\",\r\n  \"hour\",\r\n  \"day\",\r\n  \"week\",\r\n  \"month\",\r\n  \"quarter\",\r\n  \"year\"\r\n]\r\n\r\n// Valid values for the `numeric` option.\r\nconst NUMERIC_VALUES = [\r\n  \"auto\",\r\n  \"always\"\r\n]\r\n\r\n// Valid values for the `style` option.\r\nconst STYLE_VALUES = [\r\n  \"long\",\r\n  \"short\",\r\n  \"narrow\"\r\n]\r\n\r\n/**\r\n * Polyfill for `Intl.RelativeTimeFormat` proposal.\r\n * https://github.com/tc39/proposal-intl-relative-time\r\n * https://github.com/tc39/proposal-intl-relative-time/issues/55\r\n */\r\nexport default class RelativeTimeFormat {\r\n  numeric = \"always\"\r\n  style = \"long\"\r\n  localeMatcher = \"lookup\"\r\n\r\n  /**\r\n   * @param {(string|string[])} [locales] - Preferred locales (or locale).\r\n   * @param {Object} [options] - Formatting options.\r\n   * @param {string} [options.style=\"long\"] - One of: \"long\", \"short\", \"narrow\".\r\n   * @param {string} [options.numeric=\"always\"] - (Version >= 2) One of: \"always\", \"auto\".\r\n   * @param {string} [options.localeMatcher=\"lookup\"] - One of: \"lookup\", \"best fit\". Currently only \"lookup\" is supported.\r\n   */\r\n  constructor(locales = [], options = {}) {\r\n    const {\r\n      numeric,\r\n      style,\r\n      localeMatcher\r\n    } = options\r\n\r\n    // Set `numeric` option.\r\n    if (numeric) {\r\n      if (NUMERIC_VALUES.indexOf(numeric) < 0) {\r\n        throw new RangeError(`Invalid \"numeric\" option: ${numeric}`)\r\n      }\r\n      this.numeric = numeric\r\n    }\r\n\r\n    // Set `style` option.\r\n    if (style) {\r\n      if (STYLE_VALUES.indexOf(style) < 0) {\r\n        throw new RangeError(`Invalid \"style\" option: ${style}`)\r\n      }\r\n      this.style = style\r\n    }\r\n\r\n    // Set `localeMatcher` option.\r\n    if (localeMatcher) {\r\n      this.localeMatcher = localeMatcher\r\n    }\r\n\r\n    // Set `locale`.\r\n    // Convert `locales` to an array.\r\n    if (typeof locales === 'string') {\r\n      locales = [locales]\r\n    }\r\n    // Add default locale.\r\n    locales.push(getDefaultLocale())\r\n    // Choose the most appropriate locale.\r\n    this.locale = RelativeTimeFormat.supportedLocalesOf(locales, {\r\n      localeMatcher: this.localeMatcher\r\n    })[0]\r\n    if (!this.locale) {\r\n      throw new TypeError(\"No supported locale was found\")\r\n    }\r\n    this.locale = resolveLocale(this.locale, {\r\n      localeMatcher: this.localeMatcher\r\n    })\r\n\r\n    // Use `Intl.NumberFormat` for formatting numbers (when available).\r\n    if (typeof Intl !== 'undefined' && Intl.NumberFormat) {\r\n      this.numberFormat = new Intl.NumberFormat(this.locale)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Formats time `value` in `units` (either in past or in future).\r\n   * @param {number} value - Time interval value.\r\n   * @param {string} unit - Time interval measurement unit.\r\n   * @return {string}\r\n   * @throws {RangeError} If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\".\r\n   * @example\r\n   * // Returns \"2 days ago\"\r\n   * rtf.format(-2, \"day\")\r\n   * // Returns \"in 5 minutes\"\r\n   * rtf.format(5, \"minute\")\r\n   */\r\n  format(value, unit) {\r\n    return this.getRule(value, unit).replace('{0}', this.formatNumber(Math.abs(value)))\r\n  }\r\n\r\n  /**\r\n   * Formats time `value` in `units` (either in past or in future).\r\n   * @param {number} value - Time interval value.\r\n   * @param {string} unit - Time interval measurement unit.\r\n   * @return {Object[]} The parts (`{ type, value }`).\r\n   * @throws {RangeError} If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\".\r\n   * @example\r\n   * // Version 1.\r\n   * // Returns [\r\n   * //   { type: \"literal\", value: \"in \" },\r\n   * //   { type: \"day\", value: \"100\" },\r\n   * //   { type: \"literal\", value: \" days\" }\r\n   * // ]\r\n   * rtf.formatToParts(100, \"day\")\r\n   * //\r\n   * // Version 2.\r\n   * // Returns [\r\n   * //   { type: \"literal\", value: \"in \" },\r\n   * //   { type: \"integer\", value: \"100\", unit: \"day\" },\r\n   * //   { type: \"literal\", value: \" days\" }\r\n   * // ]\r\n   * rtf.formatToParts(100, \"day\")\r\n   */\r\n  formatToParts(value, unit) {\r\n    const rule = this.getRule(value, unit)\r\n    const valueIndex = rule.indexOf(\"{0}\")\r\n    // \"yesterday\"/\"today\"/\"tomorrow\".\r\n    if (valueIndex < 0) {\r\n      return [{\r\n        type: \"literal\",\r\n        value: rule\r\n      }]\r\n    }\r\n    const parts = []\r\n    if (valueIndex > 0) {\r\n      parts.push({\r\n        type: \"literal\",\r\n        value: rule.slice(0, valueIndex)\r\n      })\r\n    }\r\n    parts.push({\r\n      unit,\r\n      type: \"integer\",\r\n      value: this.formatNumber(Math.abs(value))\r\n    })\r\n    if (valueIndex + \"{0}\".length < rule.length - 1) {\r\n      parts.push({\r\n        type: \"literal\",\r\n        value: rule.slice(valueIndex + \"{0}\".length)\r\n      })\r\n    }\r\n    return parts\r\n  }\r\n\r\n  /**\r\n   * Returns formatting rule for `value` in `units` (either in past or in future).\r\n   * @param {number} value - Time interval value.\r\n   * @param {string} unit - Time interval measurement unit.\r\n   * @return {string}\r\n   * @throws {RangeError} If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\".\r\n   * @example\r\n   * // Returns \"{0} days ago\"\r\n   * getRule(-2, \"day\")\r\n   */\r\n  getRule(value, unit) {\r\n    if (UNITS.indexOf(unit) < 0) {\r\n      throw new RangeError(`Unknown time unit: ${unit}.`)\r\n    }\r\n    // Get locale-specific time interval formatting rules\r\n    // of a given `style` for the given value of measurement `unit`.\r\n    //\r\n    // E.g.:\r\n    //\r\n    // ```json\r\n    // {\r\n    //  \"past\": {\r\n    //    \"one\": \"a second ago\",\r\n    //    \"other\": \"{0} seconds ago\"\r\n    //  },\r\n    //  \"future\": {\r\n    //    \"one\": \"in a second\",\r\n    //    \"other\": \"in {0} seconds\"\r\n    //  }\r\n    // }\r\n    // ```\r\n    //\r\n    const unitRules = getLocaleData(this.locale)[this.style][unit]\r\n    // Special case for \"yesterday\"/\"today\"/\"tomorrow\".\r\n    if (this.numeric === \"auto\") {\r\n      // \"yesterday\", \"the day before yesterday\", etc.\r\n      if (value === -2 || value === -1) {\r\n        const message = unitRules[`previous${value === -1 ? '' : '-' + Math.abs(value)}`]\r\n        if (message) {\r\n          return message\r\n        }\r\n      }\r\n      // \"tomorrow\", \"the day after tomorrow\", etc.\r\n      else if (value === 1 || value === 2) {\r\n        const message = unitRules[`next${value === 1 ? '' : '-' + Math.abs(value)}`]\r\n        if (message) {\r\n          return message\r\n        }\r\n      }\r\n      // \"today\"\r\n      else if (value === 0) {\r\n        if (unitRules.current) {\r\n          return unitRules.current\r\n        }\r\n      }\r\n    }\r\n    // Choose either \"past\" or \"future\" based on time `value` sign.\r\n    // If there's only \"other\" then it's being collapsed.\r\n    // (the resulting bundle size optimization technique)\r\n    const quantifierRules = unitRules[value <= 0 ? \"past\" : \"future\"]\r\n    // Bundle size optimization technique.\r\n    if (typeof quantifierRules === \"string\") {\r\n      return quantifierRules\r\n    }\r\n    // Quantify `value`.\r\n    const quantify = getLocaleData(this.locale).quantify\r\n    let quantifier = quantify && quantify(Math.abs(value))\r\n    // There seems to be no such locale in CLDR\r\n    // for which `quantify` is missing\r\n    // and still `past` and `future` messages\r\n    // contain something other than \"other\".\r\n    /* istanbul ignore next */\r\n    quantifier = quantifier || 'other'\r\n    // \"other\" rule is supposed to be always present.\r\n    // If only \"other\" rule is present then \"rules\" is not an object and is a string.\r\n    return quantifierRules[quantifier] || quantifierRules.other\r\n  }\r\n\r\n  /**\r\n   * Formats a number into a string.\r\n   * Uses `Intl.NumberFormat` when available.\r\n   * @param  {number} number\r\n   * @return {string}\r\n   */\r\n  formatNumber(number) {\r\n    return this.numberFormat ? this.numberFormat.format(number) : String(number)\r\n  }\r\n\r\n  /**\r\n   * Returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this DateTimeFormat object.\r\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/resolvedOptions\r\n   * @return {Object}\r\n   */\r\n  resolvedOptions() {\r\n    return {\r\n      locale: this.locale,\r\n      style: this.style,\r\n      numeric: this.numeric\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Returns an array containing those of the provided locales\r\n * that are supported in collation without having to fall back\r\n * to the runtime's default locale.\r\n * @param {(string|string[])} locale - A string with a BCP 47 language tag, or an array of such strings. For the general form of the locales argument, see the Intl page.\r\n * @param {Object} [options] - An object that may have the following property:\r\n * @param {string} [options.localeMatcher=\"lookup\"] - The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\". Currently only \"lookup\" is supported.\r\n * @return {string[]} An array of strings representing a subset of the given locale tags that are supported in collation without having to fall back to the runtime's default locale.\r\n * @example\r\n * var locales = ['ban', 'id-u-co-pinyin', 'es-PY']\r\n * var options = { localeMatcher: 'lookup' }\r\n * // Returns [\"id\", \"es-PY\"]\r\n * Intl.RelativeTimeFormat.supportedLocalesOf(locales, options)\r\n */\r\nRelativeTimeFormat.supportedLocalesOf = function(locales, options = {}) {\r\n  // Convert `locales` to an array.\r\n  if (typeof locales === 'string') {\r\n    locales = [locales]\r\n  }\r\n  return locales.filter(locale => resolveLocale(locale, options))\r\n}\r\n\r\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n */\r\nRelativeTimeFormat.addLocale = addLocaleData\r\n\r\n/**\r\n * Sets default locale.\r\n * @param  {string} locale\r\n */\r\nRelativeTimeFormat.setDefaultLocale = setDefaultLocale\r\n\r\n/**\r\n * Gets default locale.\r\n * @return  {string} locale\r\n */\r\nRelativeTimeFormat.getDefaultLocale = getDefaultLocale\r\n\r\n/**\r\n * Extracts language from an IETF BCP 47 language tag.\r\n * @param {string} languageTag - IETF BCP 47 language tag.\r\n * @return {string}\r\n * @example\r\n * // Returns \"he\"\r\n * getLanguageFromLanguageTag(\"he-IL-u-ca-hebrew-tz-jeruslm\")\r\n * // Returns \"ar\"\r\n * getLanguageFromLanguageTag(\"ar-u-nu-latn\")\r\n */\r\n// export function getLanguageFromLanguageTag(languageTag) {\r\n//   const hyphenIndex = languageTag.indexOf('-')\r\n//   if (hyphenIndex > 0) {\r\n//     return languageTag.slice(0, hyphenIndex)\r\n//   }\r\n//   return languageTag\r\n// }"],"file":"RelativeTimeFormat.js"}