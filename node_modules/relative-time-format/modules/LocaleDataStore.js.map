{"version":3,"sources":["../source/LocaleDataStore.js"],"names":["defaultLocale","localesData","getDefaultLocale","setDefaultLocale","locale","getLocaleData","addLocaleData","localeData","Error"],"mappings":"AAAA;AACA;AACA,IAAIA,aAAa,GAAG,IAApB,C,CAEA;AACA;;AACA,IAAMC,WAAW,GAAG,EAApB;AAEA,OAAO,SAASC,gBAAT,GAA4B;AACjC,SAAOF,aAAP;AACD;AAED,OAAO,SAASG,gBAAT,CAA0BC,MAA1B,EAAkC;AACvCJ,EAAAA,aAAa,GAAGI,MAAhB;AACD,C,CAED;AACA;AACA;;AAEA,OAAO,SAASC,aAAT,CAAuBD,MAAvB,EAA+B;AACpC,SAAOH,WAAW,CAACG,MAAD,CAAlB;AACD;AAED,OAAO,SAASE,aAAT,CAAuBC,UAAvB,EAAmC;AACxC,MAAI,CAACA,UAAL,EAAiB;AACf,UAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD,GAHuC,CAIxC;AACA;;;AACAP,EAAAA,WAAW,CAACM,UAAU,CAACH,MAAZ,CAAX,GAAiCG,UAAjC;AACD","sourcesContent":["// Fallback locale.\r\n// (when not a single one of the supplied \"preferred\" locales is available)\r\nlet defaultLocale = 'en'\r\n\r\n// For all locales added\r\n// their relative time formatter messages will be stored here.\r\nconst localesData = {}\r\n\r\nexport function getDefaultLocale() {\r\n  return defaultLocale\r\n}\r\n\r\nexport function setDefaultLocale(locale) {\r\n  defaultLocale = locale\r\n}\r\n\r\n// export function isLocaleDataAvailable(locale) {\r\n//  return localesData.hasOwnProperty(locale)\r\n// }\r\n\r\nexport function getLocaleData(locale) {\r\n  return localesData[locale]\r\n}\r\n\r\nexport function addLocaleData(localeData) {\r\n  if (!localeData) {\r\n    throw new Error('No locale data passed')\r\n  }\r\n  // This locale data is stored in a global variable\r\n  // and later used when calling `.format(time)`.\r\n  localesData[localeData.locale] = localeData\r\n}"],"file":"LocaleDataStore.js"}