{"version":3,"sources":["../source/RelativeTimeFormat.test.js"],"names":["RelativeTimeFormat","addLocale","ccp","de","en","ru","to","setDefaultLocale","describe","it","expect","style","throw","numeric","rtf","format","equal","localeMatcher","NumberFormat","Intl","enLongDay","long","day","previous","current","next","formatToParts","deep","type","value","unit","supportedLocalesOf","should","timeZone","resolvedOptions","locale"],"mappings":"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","sourcesContent":["import ccp from '../locale/ccp'\r\nimport de from '../locale/de'\r\nimport en from '../locale/en'\r\nimport ru from '../locale/ru'\r\nimport to from '../locale/to'\r\n\r\nimport RelativeTimeFormat from './RelativeTimeFormat'\r\n\r\nRelativeTimeFormat.addLocale(ccp)\r\nRelativeTimeFormat.addLocale(de)\r\nRelativeTimeFormat.addLocale(en)\r\nRelativeTimeFormat.addLocale(ru)\r\nRelativeTimeFormat.addLocale(to)\r\n\r\n// Just so this function code is covered.\r\nRelativeTimeFormat.setDefaultLocale('en')\r\n\r\ndescribe('Intl.RelativeTimeFormat', () => {\r\n  it('should validate options', () => {\r\n    expect(() => new RelativeTimeFormat(\"en\", { style: \"postmodern\" })).to.throw(\"Invalid \\\"style\\\" option\")\r\n    expect(() => new RelativeTimeFormat(\"en\", { numeric: \"sometimes\" })).to.throw(\"Invalid \\\"numeric\\\" option\")\r\n  })\r\n\r\n  it('should fall back to default locale', () => {\r\n    const rtf = new RelativeTimeFormat()\r\n    expect(rtf.format(-1, \"day\")).to.equal(\"1 day ago\")\r\n  })\r\n\r\n  it('should throw when \"numeric\" option is not a valid one', () => {\r\n    expect(() => new RelativeTimeFormat(\"en\", { numeric: \"sometimes\" })).to.throw('Invalid \"numeric\" option')\r\n  })\r\n\r\n  it('should use the passed \"style\" option', () => {\r\n    const rtf = new RelativeTimeFormat(\"en\", { style: \"short\" })\r\n    expect(rtf.format(-1, \"year\")).to.equal(\"1 yr. ago\")\r\n  })\r\n\r\n  it('should throw when \"style\" option is not a valid one', () => {\r\n    expect(() => new RelativeTimeFormat(\"en\", { style: \"postmodern\" })).to.throw('Invalid \"style\" option')\r\n  })\r\n\r\n  it('should use the passed \"localeMatcher\" option', () => {\r\n    const rtf = new RelativeTimeFormat(\"en-XX\", { localeMatcher: \"lookup\" })\r\n    expect(rtf.format(-1, \"day\")).to.equal(\"1 day ago\")\r\n  })\r\n\r\n  it('should throw when \"localeMatcher\" option is not a valid one', () => {\r\n    expect(() => new RelativeTimeFormat(\"en\", { localeMatcher: \"eccentric\" })).to.throw('Invalid \"localeMatcher\" option')\r\n  })\r\n\r\n  it('should throw if no supported locale was found', () => {\r\n    RelativeTimeFormat.setDefaultLocale('xx')\r\n    expect(() => new RelativeTimeFormat()).to.throw(\"No supported locale was found\")\r\n    RelativeTimeFormat.setDefaultLocale('en')\r\n  })\r\n\r\n  it('should format relative time', () => {\r\n    const rtf = new RelativeTimeFormat(\"en\")\r\n\r\n    expect(rtf.format(-1, \"day\")).to.equal(\"1 day ago\")\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"2 days ago\")\r\n    expect(rtf.format(2.15, \"day\")).to.equal(\"in 2.15 days\")\r\n    expect(rtf.format(100, \"day\")).to.equal(\"in 100 days\")\r\n  })\r\n\r\n  it('should fall back to \"other\" quantifier if others have been removed as an optimization', () => {\r\n    const rtf = new RelativeTimeFormat(\"ru\")\r\n    // `2` is classified as \"few\" in Russian.\r\n    // The rule for \"few\" is identical to that for \"other\"\r\n    // so the rule for \"few\" is omitted from locale data\r\n    // to reduce bundle size.\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"2 дня назад\")\r\n  })\r\n\r\n  it('should throw if a time unit is unsupported', () => {\r\n    const rtf = new RelativeTimeFormat(\"en\")\r\n    expect(() => rtf.format(-1, \"decade\")).to.throw(\"Unknown time unit: decade.\")\r\n  })\r\n\r\n  it('should format yesterday/today/tomorrow', () => {\r\n    const rtf = new RelativeTimeFormat(\"de\", { numeric: \"auto\" })\r\n\r\n    // \"today\" is useless for relative time labels.\r\n    // E.g. for `23:59:00` \"today\" is too vague.\r\n    // And for `00:01:00` \"today\" is counter-intuitive.\r\n    // \"yesterday\" and \"tomorrow\" are also useless for relative time.\r\n    // E.g. \"yesterday\" of `00:01` is misleading.\r\n    // Same as \"tomorrow\" of `23:59` which is misleading too.\r\n    // Not to mention that both of them are too \"vague\", same as \"today\".\r\n    // Also there are no rules defining when to use\r\n    // \"yesterday\", \"today\" and \"tomorrow\".\r\n    // The algorithm should take local time into account.\r\n\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"vorgestern\")\r\n    expect(rtf.format(-1, \"day\")).to.equal(\"gestern\")\r\n    expect(rtf.format(0, \"day\")).to.equal(\"heute\")\r\n    expect(rtf.format(1, \"day\")).to.equal(\"morgen\")\r\n    expect(rtf.format(2, \"day\")).to.equal(\"übermorgen\")\r\n\r\n    expect(rtf.format(0, \"second\")).to.equal(\"jetzt\")\r\n  })\r\n\r\n  it('should use \"Intl.NumberFormat\" (when available)', () => {\r\n    const rtf = new RelativeTimeFormat(\"en\")\r\n    expect(rtf.format(1000, \"day\")).to.equal(\"in 1,000 days\")\r\n  })\r\n\r\n  it('should fall back when \"Intl.NumberFormat\" is not available', () => {\r\n    const NumberFormat = Intl.NumberFormat\r\n    // I imagine `Intl` object getting \"frozen\" in future.\r\n    delete Intl.NumberFormat\r\n    const rtf = new RelativeTimeFormat(\"en\")\r\n    expect(rtf.format(1000, \"day\")).to.equal(\"in 1000 days\")\r\n    Intl.NumberFormat = NumberFormat\r\n  })\r\n\r\n  it('shouldn\\'t format yesterday/today/tomorrow when there\\'s no locale data', () => {\r\n    const enLongDay = { ...en.long.day }\r\n    delete en.long.day.previous\r\n    delete en.long.day.current\r\n    delete en.long.day.next\r\n\r\n    const rtf = new RelativeTimeFormat(\"en\", { numeric: \"auto\" })\r\n\r\n    // \"today\" is useless for relative time labels.\r\n    // E.g. for `23:59:00` \"today\" is too vague.\r\n    // And for `00:01:00` \"today\" is counter-intuitive.\r\n    // \"yesterday\" and \"tomorrow\" are also useless for relative time.\r\n    // E.g. \"yesterday\" of `00:01` is misleading.\r\n    // Same as \"tomorrow\" of `23:59` which is misleading too.\r\n    // Not to mention that both of them are too \"vague\", same as \"today\".\r\n    // Also there are no rules defining when to use\r\n    // \"yesterday\", \"today\" and \"tomorrow\".\r\n    // The algorithm should take local time into account.\r\n\r\n    expect(rtf.format(-1, \"day\")).to.equal(\"1 day ago\")\r\n    expect(rtf.format(0, \"day\")).to.equal(\"0 days ago\")\r\n    expect(rtf.format(1, \"day\")).to.equal(\"in 1 day\")\r\n\r\n    en.long.day = enLongDay\r\n  })\r\n\r\n  it('should accept an array of locales', () => {\r\n    const rtf = new RelativeTimeFormat([\"en\"])\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"2 days ago\")\r\n  })\r\n\r\n  it('should resolve locales as \"best fit\"', () => {\r\n    const rtf = new RelativeTimeFormat('en-XX')\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"2 days ago\")\r\n  })\r\n\r\n  it('should fallback to default system locale', () => {\r\n    const rtf = new RelativeTimeFormat()\r\n    expect(rtf.format(-2, \"day\")).to.equal(\"2 days ago\")\r\n  })\r\n\r\n  it('should format to parts', () => {\r\n    let rtf = new RelativeTimeFormat(\"en\")\r\n\r\n    expect(rtf.formatToParts(100, \"day\")).to.deep.equal([\r\n      { type: \"literal\", value: \"in \" },\r\n      { type: \"integer\", value: \"100\", unit: \"day\" },\r\n      { type: \"literal\", value: \" days\" }\r\n    ])\r\n\r\n    expect(rtf.formatToParts(-100, \"day\")).to.deep.equal([\r\n      { type: \"integer\", value: \"100\", unit: \"day\" },\r\n      { type: \"literal\", value: \" days ago\" }\r\n    ])\r\n  })\r\n\r\n  it('should format to parts with numeric=\"auto\"', () => {\r\n    const rtf = new RelativeTimeFormat(\"en\", { numeric: \"auto\" })\r\n\r\n    expect(rtf.formatToParts(-1, \"day\")).to.deep.equal([\r\n      { type: \"literal\", value: \"yesterday\" }\r\n    ])\r\n\r\n    expect(rtf.formatToParts(100, \"day\")).to.deep.equal([\r\n      { type: \"literal\", value: \"in \" },\r\n      { type: \"integer\", value: \"100\", unit: \"day\" },\r\n      { type: \"literal\", value: \" days\" }\r\n    ])\r\n  })\r\n\r\n  it('should format to parts (non-English)', () => {\r\n    // Tonga (Tonga Islands)\r\n    const rtf = new RelativeTimeFormat(\"to\")\r\n    expect(rtf.formatToParts(100, \"day\")).to.deep.equal([\r\n      { type: \"literal\", value: \"ʻi he ʻaho ʻe \" },\r\n      { type: \"integer\", value: \"100\", unit: \"day\" }\r\n    ])\r\n  })\r\n\r\n  it('\"supportedLocalesOf\" should list supported locales', function() {\r\n    expect(RelativeTimeFormat.supportedLocalesOf(['es-ES', 'ru', 'ru-XX', 'en-GB']))\r\n      .to.deep.equal(['ru', 'ru-XX', 'en-GB'])\r\n    expect(RelativeTimeFormat.supportedLocalesOf('ru-XX')).to.deep.equal(['ru-XX'])\r\n  })\r\n\r\n  it('\"supportedLocalesOf\" should throw when \"localeMatcher\" option is not a valid one', () => {\r\n    expect(() => RelativeTimeFormat.supportedLocalesOf([\"en\"], { localeMatcher: \"eccentric\" })).to.throw('Invalid \"localeMatcher\" option')\r\n  })\r\n\r\n  it(`should quantify as \"other\" when no quantifier function is present for a locale`, () => {\r\n    new RelativeTimeFormat(\"ccp\").format(1, \"minute\").should.equal(\"1 𑄟𑄨𑄚𑄨𑄘𑄬\")\r\n  })\r\n\r\n  it('should show resolved options', function() {\r\n    expect(new RelativeTimeFormat('ru-XX', { timeZone: 'UTC' }).resolvedOptions()).to.deep.equal({\r\n      locale: \"ru\",\r\n      style: \"long\",\r\n      numeric: \"always\"\r\n    })\r\n  })\r\n})"],"file":"RelativeTimeFormat.test.js"}